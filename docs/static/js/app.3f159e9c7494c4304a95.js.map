{"version":3,"sources":["webpack:///./static/js/Math.js","webpack:///./src/js/resources/Resource.js","webpack:///./src/js/ships/Ship.js","webpack:///./src/js/ships/Parachute.js","webpack:///./src/js/ships/Plane.js","webpack:///./src/js/ships/Spaceship.js","webpack:///./src/js/resources/Coin.js","webpack:///./src/js/particles/ParticleManager.js","webpack:///./src/app.js","webpack:///./src/js/main.js","webpack:///./static/js/GLTFLoader.js"],"names":["Math","clamp","value","min","max","map","x","a1","a2","b1","b2","Resource","modelUrl","scale","rotation","audioUrl","audioListener","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default","this","_this","__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_possibleConstructorReturn___default","__proto__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_get_prototype_of___default","call","model","sound","loadModel","loadAudio","t","GLTFLoader","load","gltf","scene","children","clone","set","lookAt","xhr","error","console","THREE","Audio","AudioLoader","buffer","setBuffer","setLoop","setVolume","require","Ship","velocity","audioPlay","classCallCheck_default","possibleConstructorReturn_default","get_prototype_of_default","center","setFromObject","getCenter","emit","play","Parachute","PI","Coin","ParticleManager","camera","_scene","_camera","prevCamX","prevCamY","prevCamZ","maxParticles","spread","particles","p","particle","random","vertices","push","pMaterial","color","size","loadTexture","blending","transparent","particleSystem","sortParticles","add","name","xDiff","position","yDiff","y","zDiff","z","i","geometry","length","verticesNeedUpdate","Main","currentLevel","mouseX","mouseY","prevMouseX","prevMouseY","useMouse","diffX","diffY","audioList","url","maxX","maxY","velX","minAltitude","altitude","curAltitude","destPos","raycaster","far","direction","normalize","coins","coin","paused","levels","ship","skyColor","decay","Plane","Spaceship","window","innerWidth","innerHeight","_renderer","setPixelRatio","devicePixelRatio","setSize","document","body","appendChild","domElement","stats","Stats","showPanel","dom","light","dirLight","material","emissive","ground","on","addEventListener","onMouseMove","bind","onMouseDown","onMouseUp","onKeyDown","onKeyUp","onWindowResize","initAccelerometer","animate","event","pageX","pageY","nextLevel","e","keyCode","aspect","updateProjectionMatrix","begin","progress","c","removeCoin","oldModelPos","dir","subVectors","distanceToSquared","onResourceCollide","update","lerp","background","fog","prevLevel","render","end","requestAnimationFrame","startLevel","level","log","copy","isPlaying","stop","resource","increase","index","indexOf","splice","remove","a","sort","b","currentAudio","counter","onAudioEnd","source","onended","_this2","args","frequency","gravityNormalized","orientationBase","GyroNorm","GAME","decimalCount","logger","screenAdjusted","gn","init","then","start","data","dm","gx","gz","catch","alert","manager","undefined","DefaultLoadingManager","prototype","constructor","crossOrigin","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","loader","FileLoader","setResponseType","parse","setCrossOrigin","setPath","content","extensions","decodeText","Uint8Array","BINARY_EXTENSION_HEADER_MAGIC","EXTENSIONS","KHR_BINARY_GLTF","headerView","DataView","BINARY_EXTENSION_HEADER_LENGTH","header","magic","slice","version","getUint32","Error","chunkView","chunkIndex","byteLength","chunkLength","chunkType","BINARY_EXTENSION_CHUNK_TYPES","JSON","contentArray","BIN","byteOffset","json","asset","extensionsUsed","KHR_LIGHTS","lights","lightId","lightNode","Color","fromArray","type","DirectionalLight","PointLight","SpotLight","AmbientLight","constantAttenuation","intensity","linearAttenuation","distance","quadraticAttenuation","fallOffAngle","angle","fallOffExponent","warn","KHR_MATERIALS_COMMON","GLTFMaterialsCommonExtension","KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS","specularGlossinessParams","getMaterialType","ShaderMaterial","extendParams","params","parser","pbrSpecularGlossiness","shader","ShaderLib","uniforms","UniformsUtils","specularMapParsFragmentChunk","join","glossinessMapParsFragmentChunk","specularMapFragmentChunk","glossinessMapFragmentChunk","lightPhysicalFragmentChunk","fragmentShader","replace","roughness","metalness","roughnessMap","metalnessMap","specular","setHex","glossiness","specularMap","glossinessMap","vertexShader","defines","STANDARD","opacity","pending","Array","isArray","diffuseFactor","array","diffuseTexture","assignTexture","glossinessFactor","specularFactor","specularGlossinessTexture","specGlossIndex","Promise","all","createMaterial","isGLTFSpecularGlossinessMaterial","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalScale","displacementMap","displacementScale","displacementBias","alphaMap","envMap","envMapIntensity","refractionRatio","derivatives","cloneMaterial","target","il","refreshUniforms","renderer","group","uvScaleMap","offset","repeat","diffuse","multiplyScalar","isWebGLRenderTarget","texture","matrix","matrixAutoUpdate","setUvTransform","uvTransform","offsetRepeat","flipEnvMap","isCubeTexture","USE_GLOSSINESSMAP","USE_ROUGHNESSMAP","GLTFParser","scenes","cameras","animations","MeshPhongMaterial","MeshLambertMaterial","MeshBasicMaterial","materialParams","khrMaterial","keys","materialValues","forEach","v","specularTexture","shininessFactor","shininess","WEBGL_CONSTANTS","WEBGL_COMPONENT_TYPES","Number","Matrix3","Matrix4","Vector2","Vector3","Vector4","Texture","5120","Int8Array","5121","5122","Int16Array","5123","Uint16Array","5125","Uint32Array","5126","Float32Array","WEBGL_FILTERS","9728","NearestFilter","9729","LinearFilter","9984","NearestMipMapNearestFilter","9985","LinearMipMapNearestFilter","9986","NearestMipMapLinearFilter","9987","LinearMipMapLinearFilter","WEBGL_WRAPPINGS","33071","ClampToEdgeWrapping","33648","MirroredRepeatWrapping","10497","RepeatWrapping","WEBGL_TEXTURE_FORMATS","6406","AlphaFormat","6407","RGBFormat","6408","RGBAFormat","6409","LuminanceFormat","6410","LuminanceAlphaFormat","WEBGL_TEXTURE_DATATYPES","UnsignedByteType","32819","UnsignedShort4444Type","32820","UnsignedShort5551Type","33635","UnsignedShort565Type","WEBGL_TYPE_SIZES","BackSide","FrontSide","NeverDepth","LessDepth","EqualDepth","LessEqualDepth","GreaterEqualDepth","NotEqualDepth","AlwaysDepth","AddEquation","SubtractEquation","ReverseSubtractEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","PATH_PROPERTIES","translation","weights","INTERPOLATION","CUBICSPLINE","InterpolateSmooth","LINEAR","InterpolateLinear","STEP","InterpolateDiscrete","ALPHA_MODES","resolveURL","test","addMorphTargets","mesh","meshDef","primitiveDef","accessors","targets","morphAttributes","normal","morphTargets","positionAttribute","normalAttribute","attributeName","POSITION","attributes","j","jl","count","setXYZ","getX","getY","getZ","NORMAL","morphNormals","updateMorphTargets","morphTargetInfluences","isPrimitiveEqual","indices","attribA","attribB","keysA","Object","keysB","key","getCachedGeometry","cache","newPrimitive","cached","primitive","options","objects","get","object","removeAll","primitiveCache","textureLoader","TextureLoader","fileLoader","markDefs","getMultiDependencies","dependencies","nodeDefs","nodes","skinDefs","skins","meshDefs","meshes","meshReferences","meshUses","skinIndex","skinLength","joints","isBone","nodeIndex","nodeLength","nodeDef","skin","isSkinnedMesh","getDependency","cacheKey","dependency","charAt","toUpperCase","getDependencies","defs","def","types","results","pendings","loadBuffer","bufferIndex","bufferDef","buffers","uri","resolve","reject","loadBufferView","bufferViewIndex","bufferViewDef","bufferViews","loadAccessor","accessorIndex","accessorDef","pendingBufferViews","bufferView","sparse","values","bufferAttribute","itemSize","TypedArray","componentType","elementBytes","BYTES_PER_ELEMENT","itemBytes","byteStride","normalized","ib","InterleavedBuffer","InterleavedBufferAttribute","BufferAttribute","itemSizeIndices","TypedArrayIndices","byteOffsetIndices","byteOffsetValues","sparseIndices","sparseValues","setArray","setX","setY","setZ","setW","textureIndex","URL","webkitURL","textureDef","textures","images","sourceURI","isObjectURL","blob","Blob","mimeType","createObjectURL","Loader","Handlers","revokeObjectURL","flipY","format","internalFormat","sampler","samplers","magFilter","minFilter","wrapS","wrapT","textureName","loadMaterial","materialIndex","materialType","materialDef","materials","materialExtensions","khcExtension","sgExtension","pbrMetallicRoughness","MeshStandardMaterial","metallicRoughness","baseColorFactor","baseColorTexture","metallicFactor","roughnessFactor","metallicRoughnessTexture","doubleSided","side","DoubleSide","alphaMode","alphaTest","alphaCutoff","normalTexture","occlusionTexture","strength","emissiveFactor","emissiveTexture","encoding","sRGBEncoding","extras","userData","loadGeometries","primitives","geometries","BufferGeometry","attributeId","addAttribute","setIndex","loadMesh","meshIndex","Group","depthTest","uv2","uv","useVertexColors","useFlatShading","useSkinning","useMorphTargets","vertexColors","VertexColors","needsUpdate","flatShading","mode","SkinnedMesh","skinning","Mesh","drawMode","TriangleStripDrawMode","TriangleFanDrawMode","LineSegments","Line","LineLoop","Points","onBeforeRender","loadCamera","cameraIndex","cameraDef","aspectRatio","xfov","yfov","PerspectiveCamera","radToDeg","znear","zfar","OrthographicCamera","xmag","ymag","loadSkin","skinDef","skinEntry","inverseBindMatrices","accessor","loadAnimation","animationIndex","animationDef","tracks","channels","channel","node","id","input","parameters","output","inputAccessor","outputAccessor","TypedKeyframeTrack","updateMatrix","NumberKeyframeTrack","QuaternionKeyframeTrack","VectorKeyframeTrack","targetName","uuid","interpolation","outputAccessorValues","getW","targetNames","traverse","isMesh","AnimationUtils","arraySlice","AnimationClip","loadNode","Bone","isGroup","child","Object3D","PropertyBinding","sanitizeNodeName","applyMatrix","quaternion","loadScene","buildNodeHierachy","nodeId","parentObject","allNodes","bones","boneInverses","jointId","jointNode","mat","Skeleton","matrixWorld","sceneIndex","sceneDef","Scene","nodeIds","__webpack_exports__"],"mappings":"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","file":"static/js/app.3f159e9c7494c4304a95.js","sourcesContent":["Math.clamp = function ( value, min, max ) {\n\treturn Math.max( min, Math.min( max, value ) );\n}\n\nMath.map = function ( x, a1, a2, b1, b2 ) {\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./static/js/Math.js\n// module id = 0gDO\n// module chunks = 1","import GLTFLoader from '../../../static/js/GLTFLoader'\nconst EventEmitter = require('events')\n\nclass Resource extends EventEmitter {\n  constructor (modelUrl, scale, rotation, audioUrl, audioListener) {\n    super()\n\n    this.modelUrl = modelUrl\n    this.scale = scale\n    this.rotation = rotation\n    this.audioUrl = audioUrl\n    this.audioListener = audioListener\n    this.model = null\n    this.sound = null\n\n    this.loadModel()\n    this.loadAudio()\n  }\n\n  loadModel () {\n    var t = this\n    var loader = new GLTFLoader()\n    loader.load('static/models/' + t.modelUrl, function (gltf) {\n      t.model = gltf.scene.children[0].clone()\n      t.model.scale.set(t.scale, t.scale, t.scale)\n      t.model.lookAt(0, t.rotation, 0)\n    },\n    function (xhr) {\n      // console.log((xhr.loaded / xhr.total * 100) + '% loaded')\n    },\n    function (error) {\n      console.error('GLTF LOADER:', error)\n    })\n  }\n\n  loadAudio () {\n    var t = this\n    // eslint-disable-next-line\n    this.sound = new THREE.Audio(this.audioListener)\n    // eslint-disable-next-line\n    var audioLoader = new THREE.AudioLoader()\n    audioLoader.load(this.audioUrl, function (buffer) {\n      t.sound.setBuffer(buffer)\n      t.sound.setLoop(false)\n      t.sound.setVolume(0.5)\n    })\n  }\n}\n\nexport default Resource\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/resources/Resource.js","import * as THREE from 'three'\nimport GLTFLoader from '../../../static/js/GLTFLoader'\nconst EventEmitter = require('events')\n\nclass Ship extends EventEmitter {\n  constructor (modelUrl, scale, rotation, velocity, audioUrl, audioListener, audioPlay) {\n    super()\n\n    this.modelUrl = modelUrl\n    this.scale = scale\n    this.rotation = rotation\n    this.velocity = velocity\n    this.audioUrl = audioUrl\n    this.audioListener = audioListener\n    this.audioPlay = audioPlay\n    this.model = null\n    this.sound = null\n    this.center = new THREE.Vector3(0, 0, 0)\n\n    this.loadModel()\n    this.loadAudio()\n  }\n\n  loadModel () {\n    var t = this\n    // eslint-disable-next-line\n    var loader = new GLTFLoader()\n    loader.load('static/models/' + this.modelUrl, function (gltf) {\n      t.model = gltf.scene.children[0]\n      t.model.scale.set(t.scale, t.scale, t.scale)\n      t.center = new THREE.Box3().setFromObject(t.model).getCenter()\n      t.emit('onModelLoaded', t.model)\n    },\n    function (xhr) {\n      // console.log((xhr.loaded / xhr.total * 100) + '% loaded')\n    },\n    function (error) {\n      console.error('GLTF LOADER:', error)\n    })\n  }\n\n  loadAudio () {\n    var t = this\n    // eslint-disable-next-line\n    this.sound = new THREE.Audio(this.audioListener)\n    var audioLoader = new THREE.AudioLoader()\n    audioLoader.load(this.audioUrl, function (buffer) {\n      t.sound.setBuffer(buffer)\n      t.sound.setLoop(true)\n      t.sound.setVolume(0.3)\n      if (t.audioPlay) {\n        t.sound.play()\n      }\n    })\n  }\n}\n\nexport default Ship\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/ships/Ship.js","import Ship from './Ship'\n\nclass Parachute extends Ship {\n  constructor (audioListener) {\n    super('parachute.gltf', 2.5, 0, 1, 'static/audios/205966__kangaroovindaloo__medium-wind.ogg', audioListener, true)\n  }\n}\n\nexport default Parachute\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/ships/Parachute.js","import Ship from './Ship'\n\nclass Parachute extends Ship {\n  constructor (audioListener) {\n    super('plane.gltf', 6, Math.PI + Math.PI * 0.5, 2, 'static/audios/218352__photomonster__motorcycle-nsumax-1954-engine.ogg', audioListener, false)\n  }\n}\n\nexport default Parachute\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/ships/Plane.js","import Ship from './Ship'\n\nclass Parachute extends Ship {\n  constructor (audioListener) {\n    super('spaceship.gltf', 30, Math.PI, 3, 'static/audios/42233__noisecollector__spaceswamp.ogg', audioListener, false)\n  }\n}\n\nexport default Parachute\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/ships/Spaceship.js","import Resource from './Resource'\n\nclass Coin extends Resource {\n  constructor (audioListener) {\n    super('coin.gltf', 30, 1, 'static/audios/135936__bradwesson__collectcoin.ogg', audioListener)\n  }\n}\n\nexport default Coin\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/resources/Coin.js","import * as THREE from 'three'\nconst EventEmitter = require('events')\n\nclass ParticleManager extends EventEmitter {\n  constructor (scene, camera) {\n    super()\n\n    this._scene = scene\n    this._camera = camera\n    this.prevCamX = 0\n    this.prevCamY = 0\n    this.prevCamZ = 0\n\n    this.maxParticles = 1000\n\n    this.spread = 300\n\n    this.particles = new THREE.Geometry()\n\n    for (let p = 0; p < this.maxParticles; p++) {\n      let particle = new THREE.Vector3(\n        Math.random() * this.spread - this.spread * 0.5,\n        Math.random() * this.spread - this.spread * 0.5,\n        Math.random() * this.spread - this.spread * 0.5\n      )\n\n      this.particles.vertices.push(particle)\n    }\n\n    let pMaterial = new THREE.PointsMaterial({\n      color: 0xFFFFFF,\n      size: 2,\n      map: THREE.ImageUtils.loadTexture(\n        'static/textures/particle.png'\n      ),\n      blending: THREE.AdditiveBlending,\n      transparent: true\n    })\n    this.particleSystem = new THREE.Points(this.particles, pMaterial)\n    this.particleSystem.sortParticles = true\n\n    this._scene.add(this.particleSystem)\n  }\n\n  set (name) {\n    if (name === 'Star') {\n\n    }\n  }\n\n  update () {\n    let xDiff = this._camera.position.x - this.prevCamX\n    let yDiff = this._camera.position.y - this.prevCamY\n    let zDiff = this._camera.position.z - this.prevCamZ\n\n    this.prevCamX = this._camera.position.x\n    this.prevCamY = this._camera.position.y\n    this.prevCamZ = this._camera.position.z\n\n    this.particleSystem.position.set(this._camera.position.x, this._camera.position.y, this._camera.position.z)\n\n    for (let i = 0; i < this.particleSystem.geometry.vertices.length; i++) {\n      let particle = this.particleSystem.geometry.vertices[i]\n      particle.x -= xDiff\n      particle.y -= yDiff\n      particle.z -= zDiff\n\n      if (particle.z < -30) {\n        particle.x = Math.random() * this.spread - this.spread * 0.5\n        particle.y = Math.random() * this.spread - this.spread * 0.5\n        particle.z = 300 + Math.random() * 60\n      }\n    }\n\n    this.particleSystem.geometry.verticesNeedUpdate = true\n  }\n}\n\nexport default ParticleManager\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/particles/ParticleManager.js","import './css/style.css'\nimport Main from './js/main'\n// import Main from './js/mainWagner'\n// import Main from './js/mainVR'\n\n// eslint-disable-next-line\nnew Main()\n\n\n\n// WEBPACK FOOTER //\n// ./src/app.js","import * as THREE from 'three'\nimport * as Stats from 'stats.js'\nimport Parachute from './ships/Parachute'\nimport Plane from './ships/Plane'\nimport Spaceship from './ships/Spaceship'\nimport Coin from './resources/Coin'\nimport '../../static/js/GLTFLoader'\nimport '../../static/js/Math'\nimport ParticleManager from './particles/ParticleManager'\nimport GyroNorm from 'gyronorm/dist/gyronorm.complete.js'\n// import shaderVert from 'shaders/custom.vert'\n// import shaderFrag from 'shaders/custom.frag'\n\nclass Main {\n  constructor () {\n    var t = this\n\n    this.currentLevel = 0\n\n    this.mouseX = 0\n    this.mouseY = 0\n    this.prevMouseX = this.mouseX\n    this.prevMouseY = this.mouseY\n    this.useMouse = true\n    this.diffX = 0\n    this.diffY = 0\n\n    this.audioList = [\n      {\n        url: 'static/audios/Black-Eyed-Peas-I-Got-A-Feeling.ogg',\n        sound: null\n      },\n      {\n        url: 'static/audios/Eiffel65-Blue.ogg',\n        sound: null\n      },\n      {\n        url: 'static/audios/Enegetic-Game-Theme.ogg',\n        sound: null\n      },\n      {\n        url: 'static/audios/Imagine Dragons - Radioactive (Harder).ogg',\n        sound: null\n      }\n    ]\n    this.audioListener = new THREE.AudioListener()\n\n    this.maxX = 80\n    this.maxY = 50\n    this.velX = 1.5\n    this.minAltitude = 200 // meters\n    this.altitude = this.minAltitude\n    this.curAltitude = this.altitude\n    this.destPos = new THREE.Vector2()\n    this.raycaster = new THREE.Raycaster()\n    this.raycaster.far = 2\n    this.direction = new THREE.Vector3(0, 0, 10)\n    this.direction.normalize()\n    this.coins = []\n    this.coin = new Coin(this.audioListener)\n    this.paused = false\n\n    this.levels = [\n      {\n        ship: new Parachute(this.audioListener),\n        altitude: this.minAltitude,\n        skyColor: new THREE.Color(0xcaf8f1),\n        decay: 0.03,\n        coins: 10\n      },\n      {\n        ship: new Plane(this.audioListener),\n        altitude: 400, // 1000\n        skyColor: new THREE.Color(0xaaffff),\n        decay: 0.06,\n        coins: 7\n      },\n      {\n        ship: new Spaceship(this.audioListener),\n        altitude: 600, // 2000,\n        skyColor: new THREE.Color(0x000000),\n        decay: 0.12,\n        coins: 5\n      }\n    ]\n\n    this._camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 1000)\n    this._camera.position.set(-100, 50, 0)\n    this._camera.lookAt(0, 0, 100)\n    this._camera.add(this.audioListener)\n\n    this._scene = new THREE.Scene()\n\n    this._renderer = new THREE.WebGLRenderer()\n    this._renderer.setPixelRatio(window.devicePixelRatio)\n    this._renderer.setSize(window.innerWidth, window.innerHeight)\n    document.body.appendChild(this._renderer.domElement)\n\n    this.stats = new Stats()\n    this.stats.showPanel(0)// fps,\n    // this.stats.showPanel(1)// ms\n    // this.stats.showPanel(2)// mb\n    document.body.appendChild(this.stats.dom)\n\n    // for inspection debug\n    // window.scene = this._scene\n    // window.THREE = THREE\n\n    // 'ovni.gltf' 100\n    // 'balloon.gltf' 10\n\n    var light = new THREE.HemisphereLight(0xbbbbff, 0x444422)\n    light.name = 'Hemisphere Light'\n    light.position.set(0, 1, 0)\n    t._scene.add(light)\n\n    var dirLight = new THREE.DirectionalLight(0xffffff)\n    dirLight.name = 'Point Light'\n    dirLight.position.set(-10, 6, -10)\n    t._scene.add(dirLight)\n\n    this.particles = new ParticleManager(this._scene, this._camera)\n\n    const geometry = new THREE.SphereGeometry(1, 320, 320)\n    const material = new THREE.MeshPhongMaterial({color: 0x008800, emissive: 0x00ff00})\n    /*\n    const material2 = new THREE.ShaderMaterial({\n      vertexShader: shaderVert,\n      fragmentShader: shaderFrag\n    })\n    */\n    this.ground = new THREE.Mesh(geometry, material)\n    this.ground.name = 'Ground'\n    this._scene.add(this.ground)\n    /*\n    var wireframe = new THREE.WireframeGeometry(geometry)\n    var line = new THREE.LineSegments(wireframe)\n    line.material.depthTest = false\n    line.material.opacity = 0.25\n    line.material.transparent = true\n    this.ground.add(line)\n    */\n    const earthRadius = 6000000 // 6000 km\n    this.ground.scale.set(earthRadius, earthRadius, earthRadius)\n    this.ground.position.y = -earthRadius\n    this.ground.rotation.z = Math.PI * 0.5\n\n    // add ship models to scene\n    for (var i = 0; i < this.levels.length; i++) {\n      this.levels[i].ship.on('onModelLoaded', function (model) {\n        t._scene.add(model)\n      })\n    }\n\n    this._renderer.domElement.addEventListener('mousemove', this.onMouseMove.bind(this), false)\n    this._renderer.domElement.addEventListener('mousedown', this.onMouseDown.bind(this), false)\n    this._renderer.domElement.addEventListener('mouseup', this.onMouseUp.bind(this), false)\n    this._renderer.domElement.addEventListener('touchstart', this.onMouseDown.bind(this), false)\n    this._renderer.domElement.addEventListener('touchend', this.onMouseUp.bind(this), false)\n\n    document.addEventListener('keydown', this.onKeyDown.bind(this), false)\n    document.addEventListener('keyup', this.onKeyUp.bind(this), false)\n\n    window.addEventListener('resize', this.onWindowResize.bind(this), false)\n\n    this.loadAudio()\n    this.initAccelerometer()\n    this.animate()\n  }\n\n  onMouseMove (event) {\n    this.mouseX = event.pageX\n    this.mouseY = event.pageY\n  }\n\n  onMouseDown () {\n    this.nextLevel()\n    this.altitude = this.levels[this.currentLevel].altitude + 100\n  }\n\n  onMouseUp () {\n  }\n\n  onKeyDown (e) {\n    if (e.keyCode === 32) this.paused = !this.paused\n  }\n\n  onKeyUp (e) {\n  }\n\n  onWindowResize () {\n    this._camera.aspect = window.innerWidth / window.innerHeight\n    this._camera.updateProjectionMatrix()\n\n    this._renderer.setSize(window.innerWidth, window.innerHeight)\n  }\n\n  animate () {\n    this.stats.begin()\n\n    if (!this.paused) {\n      // mouse\n      this.diffX += (this.mouseX - this.prevMouseX) / 100\n      this.diffY += (this.mouseY - this.prevMouseY) / 100\n      this.diffX = Math.clamp(this.diffX, -1, 1)\n      this.diffY = Math.clamp(this.diffY, -1, 1)\n      this.prevMouseX = this.mouseX\n      this.prevMouseY = this.mouseY\n\n      // altitude\n      this.altitude -= this.levels[this.currentLevel].decay\n      if (this.altitude < this.minAltitude) this.altitude = this.minAltitude\n      this.curAltitude += (this.altitude - this.curAltitude) * 0.05\n\n      let nextLevel = this.currentLevel + 1\n      if (nextLevel >= this.levels.length) {\n        nextLevel = this.currentLevel\n      }\n      let progress = (this.altitude - this.levels[this.currentLevel].altitude) / (this.levels[nextLevel].altitude - this.levels[this.currentLevel].altitude)\n      progress = THREE.Math.clamp(progress, 0, 1)\n\n      // instantiate coins\n      if (this.coin.model) {\n        if (this.coins.length < this.levels[this.currentLevel].coins && Math.random() > 0.97) {\n          var coin = this.coin.model.clone()\n          coin.rotation.z = Math.random() * Math.PI\n          coin.position.set(\n            (Math.random() - 0.5) * 2 * this.maxX,\n            Math.random() * (this.maxY - 20) + 20 + this.curAltitude,\n            this._camera.position.z + 550 + Math.random() * 60)\n          this._scene.add(coin)\n          this.coins.push(coin)\n        }\n      }\n\n      // update or remove coins\n      for (var c = this.coins.length - 1; c >= 0; c--) {\n        if (this.coins[c].position.z < this._camera.position.z) {\n          this.removeCoin(this.coins[c])\n        } else {\n          this.coins[c].rotation.z += 0.02\n        }\n      }\n\n      var model = this.levels[this.currentLevel].ship.model\n      if (model) {\n        var oldModelPos = model.position.clone()\n\n        // position\n        this.destPos.x = Math.map(-this.diffX, -1, 1, -this.maxX, this.maxX)\n        this.destPos.y = Math.map(-this.diffY, -1, 1, 0, this.maxY) + this.curAltitude\n        model.position.x += (this.destPos.x - model.position.x) * 0.05\n        model.position.y += (this.destPos.y - model.position.y) * 0.05\n        model.position.z += this.levels[this.currentLevel].ship.velocity * this.velX\n\n        // camera\n        this._camera.position.z = model.position.z - 50\n        this._camera.position.y = this.curAltitude + 50\n\n        // ground\n        this.ground.position.z = model.position.z\n        // this.ground.rotation.x += 0.00005\n\n        // direction\n        var dir = new THREE.Vector3()\n        dir.subVectors(model.position, oldModelPos)\n        dir.add(model.position)\n        model.lookAt(dir)\n        model.rotation.y += this.levels[this.currentLevel].ship.rotation\n\n        // collider\n        var position = model.position.clone().add(this.levels[this.currentLevel].ship.center)\n        for (var i = this.coins.length - 1; i >= 0; i--) {\n          if (position.distanceToSquared(this.coins[i].position) < 200) {\n            this.onResourceCollide(this.coins[i])\n          }\n        }\n      // if model\n      }\n\n      this.particles.update()\n\n      // color\n      let skyColor = this.levels[this.currentLevel].skyColor.clone()\n      skyColor.lerp(this.levels[nextLevel].skyColor, progress)\n      this._scene.background = skyColor\n      this._scene.fog = new THREE.FogExp2(skyColor, 0.003)\n\n      // console.log(progress)\n      if (progress <= 0) {\n        this.prevLevel()\n      } else if (progress >= 1) {\n        this.nextLevel()\n      }\n\n    // if !this.paused\n    }\n\n    this._renderer.render(this._scene, this._camera)\n\n    this.stats.end()\n\n    requestAnimationFrame(this.animate.bind(this))\n  }\n\n  nextLevel () {\n    var nextLevel = this.currentLevel + 1\n    if (nextLevel >= this.levels.length) nextLevel = this.currentLevel\n\n    if (nextLevel === this.currentLevel) return\n\n    this.startLevel(nextLevel)\n  }\n\n  prevLevel () {\n    var prevLevel = this.currentLevel - 1\n    if (prevLevel <= 0) prevLevel = 0\n\n    if (prevLevel === this.currentLevel) return\n\n    this.startLevel(prevLevel)\n  }\n\n  startLevel (level) {\n    console.log('startLevel', level)\n    this.levels[level].ship.model.position.copy(this.levels[this.currentLevel].ship.model.position)\n    if (this.levels[this.currentLevel].ship.sound.isPlaying) {\n      this.levels[this.currentLevel].ship.sound.stop()\n    }\n    this.currentLevel = level\n    this.levels[this.currentLevel].ship.sound.play()\n  }\n\n  onResourceCollide (resource) {\n    var increase = 20\n\n    // bonus = fast coin catch\n    if (this.curAltitude < this.altitude) increase *= 2\n\n    this.altitude += increase * (this.currentLevel + 1)\n\n    this.coin.sound.play()\n\n    this.removeCoin(resource)\n  }\n\n  removeCoin (coin) {\n    var index = this.coins.indexOf(coin)\n    if (index > -1) {\n      this.coins.splice(index, 1)\n    }\n\n    this._scene.remove(coin)\n  }\n\n  loadAudio () {\n    this.audioList = this.audioList\n      .map((a) => ({sort: Math.random(), value: a}))\n      .sort((a, b) => a.sort - b.sort)\n      .map((a) => a.value)\n\n    this.currentAudio = 0\n    let counter = -1\n    let t = this\n\n    function onAudioEnd () {\n      console.log('audio ended')\n      t.currentAudio++\n      if (t.currentAudio >= t.audioList.length) t.currentAudio = 0\n\n      t.audioList[t.currentAudio].sound.play()\n      t.audioList[t.currentAudio].sound.source.onended = onAudioEnd\n    }\n\n    this.audioList.map((a) => {\n      a.index = counter++\n      a.sound = new THREE.Audio(this.audioListener)\n      var audioLoader = new THREE.AudioLoader()\n      audioLoader.load(a.url, function (buffer) {\n        a.sound.setBuffer(buffer)\n        a.sound.setLoop(false)\n        a.sound.setVolume(0.5)\n        if (a.index === 0) {\n          a.sound.play()\n          a.sound.source.onended = onAudioEnd\n        }\n      })\n    })\n  }\n\n  initAccelerometer () {\n    var args = {\n      frequency: 50, // ( How often the object sends the values - milliseconds )\n      gravityNormalized: true, // ( If the gravity related values to be normalized )\n      orientationBase: GyroNorm.GAME, // ( Can be GyroNorm.GAME or GyroNorm.WORLD. gn.GAME returns orientation values with respect to the head direction of the device. gn.WORLD returns the orientation values with respect to the actual north direction of the world. )\n      decimalCount: 2, // ( How many digits after the decimal point will there be in the return values )\n      logger: null, // ( Function to be called to log messages from gyronorm.js )\n      screenAdjusted: false // ( If set to true it will return screen adjusted values. )\n    }\n\n    var gn = new GyroNorm()\n\n    let t = this\n    gn.init(args).then(() => {\n      this.useMouse = false\n      this.prevMouseX = 0\n      this.prevMouseY = 0\n      gn.start(function (data) {\n        // Process:\n        // data.do.alpha  ( deviceorientation event alpha value )\n        // data.do.beta   ( deviceorientation event beta value )\n        // data.do.gamma  ( deviceorientation event gamma value )\n        // data.do.absolute ( deviceorientation event absolute value )\n\n        // data.dm.x    ( devicemotion event acceleration x value )\n        // data.dm.y    ( devicemotion event acceleration y value )\n        // data.dm.z    ( devicemotion event acceleration z value )\n\n        // data.dm.gx   ( devicemotion event accelerationIncludingGravity x value )\n        // data.dm.gy   ( devicemotion event accelerationIncludingGravity y value )\n        // data.dm.gz   ( devicemotion event accelerationIncludingGravity z value )\n\n        // data.dm.alpha  ( devicemotion event rotationRate alpha value )\n        // data.dm.beta   ( devicemotion event rotationRate beta value )\n        // data.dm.gamma  ( devicemotion event rotationRate gamma value )\n        t.mouseX = data.dm.gx * 10\n        t.mouseY = -data.dm.gz * 10\n        console.log(t.mouseX, t.mouseY)\n      })\n    }).catch(function (e) {\n      alert('Catch if the DeviceOrientation or DeviceMotion is not supported by the browser or device')\n    })\n  }\n}\n\nexport default Main\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/main.js","/**\n * @author Rich Tibbett / https://github.com/richtr\n * @author mrdoob / http://mrdoob.com/\n * @author Tony Parisi / http://www.tonyparisi.com/\n * @author Takahiro / https://github.com/takahirox\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\nconst GLTFLoader = ( function () {\n\n\tfunction GLTFLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t}\n\n\tGLTFLoader.prototype = {\n\n\t\tconstructor: GLTFLoader,\n\n\t\tcrossOrigin: 'Anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = this.path !== undefined ? this.path : THREE.LoaderUtils.extractUrlBase( url );\n\n\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tloader.load( url, function ( data ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tscope.parse( data, path, onLoad, onError );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( onError !== undefined ) {\n\n\t\t\t\t\t\tonError( e );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow e;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( data, path, onLoad, onError ) {\n\n\t\t\tvar content;\n\t\t\tvar extensions = {};\n\n\t\t\tif ( typeof data === 'string' ) {\n\n\t\t\t\tcontent = data;\n\n\t\t\t} else {\n\n\t\t\t\tvar magic = THREE.LoaderUtils.decodeText( new Uint8Array( data, 0, 4 ) );\n\n\t\t\t\tif ( magic === BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\textensions[ EXTENSIONS.KHR_BINARY_GLTF ] = new GLTFBinaryExtension( data );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tif ( onError ) onError( error );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontent = extensions[ EXTENSIONS.KHR_BINARY_GLTF ].content;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontent = THREE.LoaderUtils.decodeText( new Uint8Array( data ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar json = JSON.parse( content );\n\n\t\t\tif ( json.asset === undefined || json.asset.version[ 0 ] < 2 ) {\n\n\t\t\t\tif ( onError ) onError( new Error( 'THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported. Use LegacyGLTFLoader instead.' ) );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( json.extensionsUsed ) {\n\n\t\t\t\tif ( json.extensionsUsed.indexOf( EXTENSIONS.KHR_LIGHTS ) >= 0 ) {\n\n\t\t\t\t\textensions[ EXTENSIONS.KHR_LIGHTS ] = new GLTFLightsExtension( json );\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.extensionsUsed.indexOf( EXTENSIONS.KHR_MATERIALS_COMMON ) >= 0 ) {\n\n\t\t\t\t\textensions[ EXTENSIONS.KHR_MATERIALS_COMMON ] = new GLTFMaterialsCommonExtension( json );\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.extensionsUsed.indexOf( EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ) >= 0 ) {\n\n\t\t\t\t\textensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ] = new GLTFMaterialsPbrSpecularGlossinessExtension();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// console.time( 'GLTFLoader' );\n\n\t\t\tvar parser = new GLTFParser( json, extensions, {\n\n\t\t\t\tpath: path || this.path || '',\n\t\t\t\tcrossOrigin: this.crossOrigin,\n\t\t\t\tmanager: this.manager\n\n\t\t\t} );\n\n\t\t\tparser.parse( function ( scene, scenes, cameras, animations, asset ) {\n\n\t\t\t\t// console.timeEnd( 'GLTFLoader' );\n\n\t\t\t\tvar glTF = {\n\t\t\t\t\tscene: scene,\n\t\t\t\t\tscenes: scenes,\n\t\t\t\t\tcameras: cameras,\n\t\t\t\t\tanimations: animations,\n\t\t\t\t\tasset: asset\n\t\t\t\t};\n\n\t\t\t\tonLoad( glTF );\n\n\t\t\t}, onError );\n\n\t\t}\n\n\t};\n\n\t/* GLTFREGISTRY */\n\n\tfunction GLTFRegistry() {\n\n\t\tvar objects = {};\n\n\t\treturn\t{\n\n\t\t\tget: function ( key ) {\n\n\t\t\t\treturn objects[ key ];\n\n\t\t\t},\n\n\t\t\tadd: function ( key, object ) {\n\n\t\t\t\tobjects[ key ] = object;\n\n\t\t\t},\n\n\t\t\tremove: function ( key ) {\n\n\t\t\t\tdelete objects[ key ];\n\n\t\t\t},\n\n\t\t\tremoveAll: function () {\n\n\t\t\t\tobjects = {};\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/*********************************/\n\t/********** EXTENSIONS ***********/\n\t/*********************************/\n\n\tvar EXTENSIONS = {\n\t\tKHR_BINARY_GLTF: 'KHR_binary_glTF',\n\t\tKHR_LIGHTS: 'KHR_lights',\n\t\tKHR_MATERIALS_COMMON: 'KHR_materials_common',\n\t\tKHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness'\n\t};\n\n\t/**\n\t * Lights Extension\n\t *\n\t * Specification: PENDING\n\t */\n\tfunction GLTFLightsExtension( json ) {\n\n\t\tthis.name = EXTENSIONS.KHR_LIGHTS;\n\n\t\tthis.lights = {};\n\n\t\tvar extension = ( json.extensions && json.extensions[ EXTENSIONS.KHR_LIGHTS ] ) || {};\n\t\tvar lights = extension.lights || {};\n\n\t\tfor ( var lightId in lights ) {\n\n\t\t\tvar light = lights[ lightId ];\n\t\t\tvar lightNode;\n\n\t\t\tvar color = new THREE.Color().fromArray( light.color );\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'directional':\n\t\t\t\t\tlightNode = new THREE.DirectionalLight( color );\n\t\t\t\t\tlightNode.position.set( 0, 0, 1 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'point':\n\t\t\t\t\tlightNode = new THREE.PointLight( color );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'spot':\n\t\t\t\t\tlightNode = new THREE.SpotLight( color );\n\t\t\t\t\tlightNode.position.set( 0, 0, 1 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ambient':\n\t\t\t\t\tlightNode = new THREE.AmbientLight( color );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( lightNode ) {\n\n\t\t\t\tif ( light.constantAttenuation !== undefined ) {\n\n\t\t\t\t\tlightNode.intensity = light.constantAttenuation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( light.linearAttenuation !== undefined ) {\n\n\t\t\t\t\tlightNode.distance = 1 / light.linearAttenuation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( light.quadraticAttenuation !== undefined ) {\n\n\t\t\t\t\tlightNode.decay = light.quadraticAttenuation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( light.fallOffAngle !== undefined ) {\n\n\t\t\t\t\tlightNode.angle = light.fallOffAngle;\n\n\t\t\t\t}\n\n\t\t\t\tif ( light.fallOffExponent !== undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader:: light.fallOffExponent not currently supported.' );\n\n\t\t\t\t}\n\n\t\t\t\tlightNode.name = light.name || ( 'light_' + lightId );\n\t\t\t\tthis.lights[ lightId ] = lightNode;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Common Materials Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/Khronos/KHR_materials_common\n\t */\n\tfunction GLTFMaterialsCommonExtension( json ) {\n\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_COMMON;\n\n\t}\n\n\tGLTFMaterialsCommonExtension.prototype.getMaterialType = function ( material ) {\n\n\t\tvar khrMaterial = material.extensions[ this.name ];\n\n\t\tswitch ( khrMaterial.type ) {\n\n\t\t\tcase 'commonBlinn' :\n\t\t\tcase 'commonPhong' :\n\t\t\t\treturn THREE.MeshPhongMaterial;\n\n\t\t\tcase 'commonLambert' :\n\t\t\t\treturn THREE.MeshLambertMaterial;\n\n\t\t\tcase 'commonConstant' :\n\t\t\tdefault :\n\t\t\t\treturn THREE.MeshBasicMaterial;\n\n\t\t}\n\n\t};\n\n\tGLTFMaterialsCommonExtension.prototype.extendParams = function ( materialParams, material, parser ) {\n\n\t\tvar khrMaterial = material.extensions[ this.name ];\n\n\t\tvar pending = [];\n\n\t\tvar keys = [];\n\n\t\t// TODO: Currently ignored: 'ambientFactor', 'ambientTexture'\n\t\tswitch ( khrMaterial.type ) {\n\n\t\t\tcase 'commonBlinn' :\n\t\t\tcase 'commonPhong' :\n\t\t\t\tkeys.push( 'diffuseFactor', 'diffuseTexture', 'specularFactor', 'specularTexture', 'shininessFactor' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'commonLambert' :\n\t\t\t\tkeys.push( 'diffuseFactor', 'diffuseTexture' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'commonConstant' :\n\t\t\tdefault :\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tvar materialValues = {};\n\n\t\tkeys.forEach( function ( v ) {\n\n\t\t\tif ( khrMaterial[ v ] !== undefined ) materialValues[ v ] = khrMaterial[ v ];\n\n\t\t} );\n\n\t\tif ( materialValues.diffuseFactor !== undefined ) {\n\n\t\t\tmaterialParams.color = new THREE.Color().fromArray( materialValues.diffuseFactor );\n\t\t\tmaterialParams.opacity = materialValues.diffuseFactor[ 3 ];\n\n\t\t}\n\n\t\tif ( materialValues.diffuseTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'map', materialValues.diffuseTexture.index ) );\n\n\t\t}\n\n\t\tif ( materialValues.specularFactor !== undefined ) {\n\n\t\t\tmaterialParams.specular = new THREE.Color().fromArray( materialValues.specularFactor );\n\n\t\t}\n\n\t\tif ( materialValues.specularTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'specularMap', materialValues.specularTexture.index ) );\n\n\t\t}\n\n\t\tif ( materialValues.shininessFactor !== undefined ) {\n\n\t\t\tmaterialParams.shininess = materialValues.shininessFactor;\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t};\n\n\t/* BINARY EXTENSION */\n\n\tvar BINARY_EXTENSION_BUFFER_NAME = 'binary_glTF';\n\tvar BINARY_EXTENSION_HEADER_MAGIC = 'glTF';\n\tvar BINARY_EXTENSION_HEADER_LENGTH = 12;\n\tvar BINARY_EXTENSION_CHUNK_TYPES = { JSON: 0x4E4F534A, BIN: 0x004E4942 };\n\n\tfunction GLTFBinaryExtension( data ) {\n\n\t\tthis.name = EXTENSIONS.KHR_BINARY_GLTF;\n\t\tthis.content = null;\n\t\tthis.body = null;\n\n\t\tvar headerView = new DataView( data, 0, BINARY_EXTENSION_HEADER_LENGTH );\n\n\t\tthis.header = {\n\t\t\tmagic: THREE.LoaderUtils.decodeText( new Uint8Array( data.slice( 0, 4 ) ) ),\n\t\t\tversion: headerView.getUint32( 4, true ),\n\t\t\tlength: headerView.getUint32( 8, true )\n\t\t};\n\n\t\tif ( this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Unsupported glTF-Binary header.' );\n\n\t\t} else if ( this.header.version < 2.0 ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Legacy binary file detected. Use LegacyGLTFLoader instead.' );\n\n\t\t}\n\n\t\tvar chunkView = new DataView( data, BINARY_EXTENSION_HEADER_LENGTH );\n\t\tvar chunkIndex = 0;\n\n\t\twhile ( chunkIndex < chunkView.byteLength ) {\n\n\t\t\tvar chunkLength = chunkView.getUint32( chunkIndex, true );\n\t\t\tchunkIndex += 4;\n\n\t\t\tvar chunkType = chunkView.getUint32( chunkIndex, true );\n\t\t\tchunkIndex += 4;\n\n\t\t\tif ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON ) {\n\n\t\t\t\tvar contentArray = new Uint8Array( data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength );\n\t\t\t\tthis.content = THREE.LoaderUtils.decodeText( contentArray );\n\n\t\t\t} else if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN ) {\n\n\t\t\t\tvar byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;\n\t\t\t\tthis.body = data.slice( byteOffset, byteOffset + chunkLength );\n\n\t\t\t}\n\n\t\t\t// Clients must ignore chunks with unknown types.\n\n\t\t\tchunkIndex += chunkLength;\n\n\t\t}\n\n\t\tif ( this.content === null ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: JSON content not found.' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specular-Glossiness Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/Khronos/KHR_materials_pbrSpecularGlossiness\n\t */\n\tfunction GLTFMaterialsPbrSpecularGlossinessExtension() {\n\n\t\treturn {\n\n\t\t\tname: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,\n\n\t\t\tspecularGlossinessParams: [\n\t\t\t\t'color',\n\t\t\t\t'map',\n\t\t\t\t'lightMap',\n\t\t\t\t'lightMapIntensity',\n\t\t\t\t'aoMap',\n\t\t\t\t'aoMapIntensity',\n\t\t\t\t'emissive',\n\t\t\t\t'emissiveIntensity',\n\t\t\t\t'emissiveMap',\n\t\t\t\t'bumpMap',\n\t\t\t\t'bumpScale',\n\t\t\t\t'normalMap',\n\t\t\t\t'displacementMap',\n\t\t\t\t'displacementScale',\n\t\t\t\t'displacementBias',\n\t\t\t\t'specularMap',\n\t\t\t\t'specular',\n\t\t\t\t'glossinessMap',\n\t\t\t\t'glossiness',\n\t\t\t\t'alphaMap',\n\t\t\t\t'envMap',\n\t\t\t\t'envMapIntensity',\n\t\t\t\t'refractionRatio',\n\t\t\t],\n\n\t\t\tgetMaterialType: function () {\n\n\t\t\t\treturn THREE.ShaderMaterial;\n\n\t\t\t},\n\n\t\t\textendParams: function ( params, material, parser ) {\n\n\t\t\t\tvar pbrSpecularGlossiness = material.extensions[ this.name ];\n\n\t\t\t\tvar shader = THREE.ShaderLib[ 'standard' ];\n\n\t\t\t\tvar uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\t\t\tvar specularMapParsFragmentChunk = [\n\t\t\t\t\t'#ifdef USE_SPECULARMAP',\n\t\t\t\t\t'\tuniform sampler2D specularMap;',\n\t\t\t\t\t'#endif'\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar glossinessMapParsFragmentChunk = [\n\t\t\t\t\t'#ifdef USE_GLOSSINESSMAP',\n\t\t\t\t\t'\tuniform sampler2D glossinessMap;',\n\t\t\t\t\t'#endif'\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar specularMapFragmentChunk = [\n\t\t\t\t\t'vec3 specularFactor = specular;',\n\t\t\t\t\t'#ifdef USE_SPECULARMAP',\n\t\t\t\t\t'\tvec4 texelSpecular = texture2D( specularMap, vUv );',\n\t\t\t\t\t'\ttexelSpecular = sRGBToLinear( texelSpecular );',\n\t\t\t\t\t'\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',\n\t\t\t\t\t'\tspecularFactor *= texelSpecular.rgb;',\n\t\t\t\t\t'#endif'\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar glossinessMapFragmentChunk = [\n\t\t\t\t\t'float glossinessFactor = glossiness;',\n\t\t\t\t\t'#ifdef USE_GLOSSINESSMAP',\n\t\t\t\t\t'\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',\n\t\t\t\t\t'\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',\n\t\t\t\t\t'\tglossinessFactor *= texelGlossiness.a;',\n\t\t\t\t\t'#endif'\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar lightPhysicalFragmentChunk = [\n\t\t\t\t\t'PhysicalMaterial material;',\n\t\t\t\t\t'material.diffuseColor = diffuseColor.rgb;',\n\t\t\t\t\t'material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );',\n\t\t\t\t\t'material.specularColor = specularFactor.rgb;',\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar fragmentShader = shader.fragmentShader\n\t\t\t\t\t.replace( '#include <specularmap_fragment>', '' )\n\t\t\t\t\t.replace( 'uniform float roughness;', 'uniform vec3 specular;' )\n\t\t\t\t\t.replace( 'uniform float metalness;', 'uniform float glossiness;' )\n\t\t\t\t\t.replace( '#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk )\n\t\t\t\t\t.replace( '#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk )\n\t\t\t\t\t.replace( '#include <roughnessmap_fragment>', specularMapFragmentChunk )\n\t\t\t\t\t.replace( '#include <metalnessmap_fragment>', glossinessMapFragmentChunk )\n\t\t\t\t\t.replace( '#include <lights_physical_fragment>', lightPhysicalFragmentChunk );\n\n\t\t\t\tdelete uniforms.roughness;\n\t\t\t\tdelete uniforms.metalness;\n\t\t\t\tdelete uniforms.roughnessMap;\n\t\t\t\tdelete uniforms.metalnessMap;\n\n\t\t\t\tuniforms.specular = { value: new THREE.Color().setHex( 0x111111 ) };\n\t\t\t\tuniforms.glossiness = { value: 0.5 };\n\t\t\t\tuniforms.specularMap = { value: null };\n\t\t\t\tuniforms.glossinessMap = { value: null };\n\n\t\t\t\tparams.vertexShader = shader.vertexShader;\n\t\t\t\tparams.fragmentShader = fragmentShader;\n\t\t\t\tparams.uniforms = uniforms;\n\t\t\t\tparams.defines = { 'STANDARD': '' };\n\n\t\t\t\tparams.color = new THREE.Color( 1.0, 1.0, 1.0 );\n\t\t\t\tparams.opacity = 1.0;\n\n\t\t\t\tvar pending = [];\n\n\t\t\t\tif ( Array.isArray( pbrSpecularGlossiness.diffuseFactor ) ) {\n\n\t\t\t\t\tvar array = pbrSpecularGlossiness.diffuseFactor;\n\n\t\t\t\t\tparams.color.fromArray( array );\n\t\t\t\t\tparams.opacity = array[ 3 ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( pbrSpecularGlossiness.diffuseTexture !== undefined ) {\n\n\t\t\t\t\tpending.push( parser.assignTexture( params, 'map', pbrSpecularGlossiness.diffuseTexture.index ) );\n\n\t\t\t\t}\n\n\t\t\t\tparams.emissive = new THREE.Color( 0.0, 0.0, 0.0 );\n\t\t\t\tparams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1.0;\n\t\t\t\tparams.specular = new THREE.Color( 1.0, 1.0, 1.0 );\n\n\t\t\t\tif ( Array.isArray( pbrSpecularGlossiness.specularFactor ) ) {\n\n\t\t\t\t\tparams.specular.fromArray( pbrSpecularGlossiness.specularFactor );\n\n\t\t\t\t}\n\n\t\t\t\tif ( pbrSpecularGlossiness.specularGlossinessTexture !== undefined ) {\n\n\t\t\t\t\tvar specGlossIndex = pbrSpecularGlossiness.specularGlossinessTexture.index;\n\t\t\t\t\tpending.push( parser.assignTexture( params, 'glossinessMap', specGlossIndex ) );\n\t\t\t\t\tpending.push( parser.assignTexture( params, 'specularMap', specGlossIndex ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all( pending );\n\n\t\t\t},\n\n\t\t\tcreateMaterial: function ( params ) {\n\n\t\t\t\t// setup material properties based on MeshStandardMaterial for Specular-Glossiness\n\n\t\t\t\tvar material = new THREE.ShaderMaterial( {\n\t\t\t\t\tdefines: params.defines,\n\t\t\t\t\tvertexShader: params.vertexShader,\n\t\t\t\t\tfragmentShader: params.fragmentShader,\n\t\t\t\t\tuniforms: params.uniforms,\n\t\t\t\t\tfog: true,\n\t\t\t\t\tlights: true,\n\t\t\t\t\topacity: params.opacity,\n\t\t\t\t\ttransparent: params.transparent\n\t\t\t\t} );\n\n\t\t\t\tmaterial.isGLTFSpecularGlossinessMaterial = true;\n\n\t\t\t\tmaterial.color = params.color;\n\n\t\t\t\tmaterial.map = params.map === undefined ? null : params.map;\n\n\t\t\t\tmaterial.lightMap = null;\n\t\t\t\tmaterial.lightMapIntensity = 1.0;\n\n\t\t\t\tmaterial.aoMap = params.aoMap === undefined ? null : params.aoMap;\n\t\t\t\tmaterial.aoMapIntensity = 1.0;\n\n\t\t\t\tmaterial.emissive = params.emissive;\n\t\t\t\tmaterial.emissiveIntensity = 1.0;\n\t\t\t\tmaterial.emissiveMap = params.emissiveMap === undefined ? null : params.emissiveMap;\n\n\t\t\t\tmaterial.bumpMap = params.bumpMap === undefined ? null : params.bumpMap;\n\t\t\t\tmaterial.bumpScale = 1;\n\n\t\t\t\tmaterial.normalMap = params.normalMap === undefined ? null : params.normalMap;\n\t\t\t\tif ( params.normalScale ) material.normalScale = params.normalScale;\n\n\t\t\t\tmaterial.displacementMap = null;\n\t\t\t\tmaterial.displacementScale = 1;\n\t\t\t\tmaterial.displacementBias = 0;\n\n\t\t\t\tmaterial.specularMap = params.specularMap === undefined ? null : params.specularMap;\n\t\t\t\tmaterial.specular = params.specular;\n\n\t\t\t\tmaterial.glossinessMap = params.glossinessMap === undefined ? null : params.glossinessMap;\n\t\t\t\tmaterial.glossiness = params.glossiness;\n\n\t\t\t\tmaterial.alphaMap = null;\n\n\t\t\t\tmaterial.envMap = params.envMap === undefined ? null : params.envMap;\n\t\t\t\tmaterial.envMapIntensity = 1.0;\n\n\t\t\t\tmaterial.refractionRatio = 0.98;\n\n\t\t\t\tmaterial.extensions.derivatives = true;\n\n\t\t\t\treturn material;\n\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Clones a GLTFSpecularGlossinessMaterial instance. The ShaderMaterial.copy() method can\n\t\t\t * copy only properties it knows about or inherits, and misses many properties that would\n\t\t\t * normally be defined by MeshStandardMaterial.\n\t\t\t *\n\t\t\t * This method allows GLTFSpecularGlossinessMaterials to be cloned in the process of\n\t\t\t * loading a glTF model, but cloning later (e.g. by the user) would require these changes\n\t\t\t * AND also updating `.onBeforeRender` on the parent mesh.\n\t\t\t *\n\t\t\t * @param  {THREE.ShaderMaterial} source\n\t\t\t * @return {THREE.ShaderMaterial}\n\t\t\t */\n\t\t\tcloneMaterial: function ( source ) {\n\n\t\t\t\tvar target = source.clone();\n\n\t\t\t\ttarget.isGLTFSpecularGlossinessMaterial = true;\n\n\t\t\t\tvar params = this.specularGlossinessParams;\n\n\t\t\t\tfor ( var i = 0, il = params.length; i < il; i ++ ) {\n\n\t\t\t\t\ttarget[ params[ i ] ] = source[ params[ i ] ];\n\n\t\t\t\t}\n\n\t\t\t\treturn target;\n\n\t\t\t},\n\n\t\t\t// Here's based on refreshUniformsCommon() and refreshUniformsStandard() in WebGLRenderer.\n\t\t\trefreshUniforms: function ( renderer, scene, camera, geometry, material, group ) {\n\n\t\t\t\tvar uniforms = material.uniforms;\n\t\t\t\tvar defines = material.defines;\n\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t\t// uv repeat and offset setting priorities\n\t\t\t\t// 1. color map\n\t\t\t\t// 2. specular map\n\t\t\t\t// 3. normal map\n\t\t\t\t// 4. bump map\n\t\t\t\t// 5. alpha map\n\t\t\t\t// 6. emissive map\n\n\t\t\t\tvar uvScaleMap;\n\n\t\t\t\tif ( material.map ) {\n\n\t\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t\t} else if ( material.glossinessMap ) {\n\n\t\t\t\t\tuvScaleMap = material.glossinessMap;\n\n\t\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t\t// backwards compatibility\n\t\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar offset;\n\t\t\t\t\tvar repeat;\n\n\t\t\t\t\tif ( uvScaleMap.matrix !== undefined ) {\n\n\t\t\t\t\t\t// > r88.\n\n\t\t\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\t\t\toffset = uvScaleMap.offset;\n\t\t\t\t\t\t\trepeat = uvScaleMap.repeat;\n\t\t\t\t\t\t\tvar rotation = uvScaleMap.rotation;\n\t\t\t\t\t\t\tvar center = uvScaleMap.center;\n\n\t\t\t\t\t\t\tuvScaleMap.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// <= r87. Remove when reasonable.\n\n\t\t\t\t\t\toffset = uvScaleMap.offset;\n\t\t\t\t\t\trepeat = uvScaleMap.repeat;\n\n\t\t\t\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.envMap.value = material.envMap;\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\t\t\tuniforms.flipEnvMap.value = ( material.envMap && material.envMap.isCubeTexture ) ? - 1 : 1;\n\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\t\tuniforms.glossiness.value = material.glossiness;\n\n\t\t\t\tuniforms.glossinessMap.value = material.glossinessMap;\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t\tif ( uniforms.glossinessMap.value !== null && defines.USE_GLOSSINESSMAP === undefined ) {\n\n\t\t\t\t\tdefines.USE_GLOSSINESSMAP = '';\n\t\t\t\t\t// set USE_ROUGHNESSMAP to enable vUv\n\t\t\t\t\tdefines.USE_ROUGHNESSMAP = '';\n\n\t\t\t\t}\n\n\t\t\t\tif ( uniforms.glossinessMap.value === null && defines.USE_GLOSSINESSMAP !== undefined ) {\n\n\t\t\t\t\tdelete defines.USE_GLOSSINESSMAP;\n\t\t\t\t\tdelete defines.USE_ROUGHNESSMAP;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/*********************************/\n\t/********** INTERNALS ************/\n\t/*********************************/\n\n\t/* CONSTANTS */\n\n\tvar WEBGL_CONSTANTS = {\n\t\tFLOAT: 5126,\n\t\t//FLOAT_MAT2: 35674,\n\t\tFLOAT_MAT3: 35675,\n\t\tFLOAT_MAT4: 35676,\n\t\tFLOAT_VEC2: 35664,\n\t\tFLOAT_VEC3: 35665,\n\t\tFLOAT_VEC4: 35666,\n\t\tLINEAR: 9729,\n\t\tREPEAT: 10497,\n\t\tSAMPLER_2D: 35678,\n\t\tPOINTS: 0,\n\t\tLINES: 1,\n\t\tLINE_LOOP: 2,\n\t\tLINE_STRIP: 3,\n\t\tTRIANGLES: 4,\n\t\tTRIANGLE_STRIP: 5,\n\t\tTRIANGLE_FAN: 6,\n\t\tUNSIGNED_BYTE: 5121,\n\t\tUNSIGNED_SHORT: 5123\n\t};\n\n\tvar WEBGL_TYPE = {\n\t\t5126: Number,\n\t\t//35674: THREE.Matrix2,\n\t\t35675: THREE.Matrix3,\n\t\t35676: THREE.Matrix4,\n\t\t35664: THREE.Vector2,\n\t\t35665: THREE.Vector3,\n\t\t35666: THREE.Vector4,\n\t\t35678: THREE.Texture\n\t};\n\n\tvar WEBGL_COMPONENT_TYPES = {\n\t\t5120: Int8Array,\n\t\t5121: Uint8Array,\n\t\t5122: Int16Array,\n\t\t5123: Uint16Array,\n\t\t5125: Uint32Array,\n\t\t5126: Float32Array\n\t};\n\n\tvar WEBGL_FILTERS = {\n\t\t9728: THREE.NearestFilter,\n\t\t9729: THREE.LinearFilter,\n\t\t9984: THREE.NearestMipMapNearestFilter,\n\t\t9985: THREE.LinearMipMapNearestFilter,\n\t\t9986: THREE.NearestMipMapLinearFilter,\n\t\t9987: THREE.LinearMipMapLinearFilter\n\t};\n\n\tvar WEBGL_WRAPPINGS = {\n\t\t33071: THREE.ClampToEdgeWrapping,\n\t\t33648: THREE.MirroredRepeatWrapping,\n\t\t10497: THREE.RepeatWrapping\n\t};\n\n\tvar WEBGL_TEXTURE_FORMATS = {\n\t\t6406: THREE.AlphaFormat,\n\t\t6407: THREE.RGBFormat,\n\t\t6408: THREE.RGBAFormat,\n\t\t6409: THREE.LuminanceFormat,\n\t\t6410: THREE.LuminanceAlphaFormat\n\t};\n\n\tvar WEBGL_TEXTURE_DATATYPES = {\n\t\t5121: THREE.UnsignedByteType,\n\t\t32819: THREE.UnsignedShort4444Type,\n\t\t32820: THREE.UnsignedShort5551Type,\n\t\t33635: THREE.UnsignedShort565Type\n\t};\n\n\tvar WEBGL_SIDES = {\n\t\t1028: THREE.BackSide, // Culling front\n\t\t1029: THREE.FrontSide // Culling back\n\t\t//1032: THREE.NoSide   // Culling front and back, what to do?\n\t};\n\n\tvar WEBGL_DEPTH_FUNCS = {\n\t\t512: THREE.NeverDepth,\n\t\t513: THREE.LessDepth,\n\t\t514: THREE.EqualDepth,\n\t\t515: THREE.LessEqualDepth,\n\t\t516: THREE.GreaterEqualDepth,\n\t\t517: THREE.NotEqualDepth,\n\t\t518: THREE.GreaterEqualDepth,\n\t\t519: THREE.AlwaysDepth\n\t};\n\n\tvar WEBGL_BLEND_EQUATIONS = {\n\t\t32774: THREE.AddEquation,\n\t\t32778: THREE.SubtractEquation,\n\t\t32779: THREE.ReverseSubtractEquation\n\t};\n\n\tvar WEBGL_BLEND_FUNCS = {\n\t\t0: THREE.ZeroFactor,\n\t\t1: THREE.OneFactor,\n\t\t768: THREE.SrcColorFactor,\n\t\t769: THREE.OneMinusSrcColorFactor,\n\t\t770: THREE.SrcAlphaFactor,\n\t\t771: THREE.OneMinusSrcAlphaFactor,\n\t\t772: THREE.DstAlphaFactor,\n\t\t773: THREE.OneMinusDstAlphaFactor,\n\t\t774: THREE.DstColorFactor,\n\t\t775: THREE.OneMinusDstColorFactor,\n\t\t776: THREE.SrcAlphaSaturateFactor\n\t\t// The followings are not supported by Three.js yet\n\t\t//32769: CONSTANT_COLOR,\n\t\t//32770: ONE_MINUS_CONSTANT_COLOR,\n\t\t//32771: CONSTANT_ALPHA,\n\t\t//32772: ONE_MINUS_CONSTANT_COLOR\n\t};\n\n\tvar WEBGL_TYPE_SIZES = {\n\t\t'SCALAR': 1,\n\t\t'VEC2': 2,\n\t\t'VEC3': 3,\n\t\t'VEC4': 4,\n\t\t'MAT2': 4,\n\t\t'MAT3': 9,\n\t\t'MAT4': 16\n\t};\n\n\tvar PATH_PROPERTIES = {\n\t\tscale: 'scale',\n\t\ttranslation: 'position',\n\t\trotation: 'quaternion',\n\t\tweights: 'morphTargetInfluences'\n\t};\n\n\tvar INTERPOLATION = {\n\t\tCUBICSPLINE: THREE.InterpolateSmooth,\n\t\tLINEAR: THREE.InterpolateLinear,\n\t\tSTEP: THREE.InterpolateDiscrete\n\t};\n\n\tvar STATES_ENABLES = {\n\t\t2884: 'CULL_FACE',\n\t\t2929: 'DEPTH_TEST',\n\t\t3042: 'BLEND',\n\t\t3089: 'SCISSOR_TEST',\n\t\t32823: 'POLYGON_OFFSET_FILL',\n\t\t32926: 'SAMPLE_ALPHA_TO_COVERAGE'\n\t};\n\n\tvar ALPHA_MODES = {\n\t\tOPAQUE: 'OPAQUE',\n\t\tMASK: 'MASK',\n\t\tBLEND: 'BLEND'\n\t};\n\n\t/* UTILITY FUNCTIONS */\n\n\tfunction resolveURL( url, path ) {\n\n\t\t// Invalid URL\n\t\tif ( typeof url !== 'string' || url === '' ) return '';\n\n\t\t// Absolute URL http://,https://,//\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n\n\t\t// Data URI\n\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\n\n\t\t// Blob URL\n\t\tif ( /^blob:.*$/i.test( url ) ) return url;\n\n\t\t// Relative URL\n\t\treturn path + url;\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material\n\t */\n\tfunction createDefaultMaterial() {\n\n\t\treturn new THREE.MeshStandardMaterial( {\n\t\t\tcolor: 0xFFFFFF,\n\t\t\temissive: 0x000000,\n\t\t\tmetalness: 1,\n\t\t\troughness: 1,\n\t\t\ttransparent: false,\n\t\t\tdepthTest: true,\n\t\t\tside: THREE.FrontSide\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets\n\t *\n\t * TODO: Implement support for morph targets on TANGENT attribute.\n\t *\n\t * @param {THREE.Mesh} mesh\n\t * @param {GLTF.Mesh} meshDef\n\t * @param {GLTF.Primitive} primitiveDef\n\t * @param {Array<THREE.BufferAttribute>} accessors\n\t */\n\tfunction addMorphTargets( mesh, meshDef, primitiveDef, accessors ) {\n\n\t\tvar geometry = mesh.geometry;\n\t\tvar material = mesh.material;\n\n\t\tvar targets = primitiveDef.targets;\n\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\tmorphAttributes.position = [];\n\t\tmorphAttributes.normal = [];\n\n\t\tmaterial.morphTargets = true;\n\n\t\tfor ( var i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\tvar target = targets[ i ];\n\t\t\tvar attributeName = 'morphTarget' + i;\n\n\t\t\tvar positionAttribute, normalAttribute;\n\n\t\t\tif ( target.POSITION !== undefined ) {\n\n\t\t\t\t// Three.js morph formula is\n\t\t\t\t//   position\n\t\t\t\t//     + weight0 * ( morphTarget0 - position )\n\t\t\t\t//     + weight1 * ( morphTarget1 - position )\n\t\t\t\t//     ...\n\t\t\t\t// while the glTF one is\n\t\t\t\t//   position\n\t\t\t\t//     + weight0 * morphTarget0\n\t\t\t\t//     + weight1 * morphTarget1\n\t\t\t\t//     ...\n\t\t\t\t// then adding position to morphTarget.\n\t\t\t\t// So morphTarget value will depend on mesh's position, then cloning attribute\n\t\t\t\t// for the case if attribute is shared among two or more meshes.\n\n\t\t\t\tpositionAttribute = accessors[ target.POSITION ].clone();\n\t\t\t\tvar position = geometry.attributes.position;\n\n\t\t\t\tfor ( var j = 0, jl = positionAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\tpositionAttribute.setXYZ(\n\t\t\t\t\t\tj,\n\t\t\t\t\t\tpositionAttribute.getX( j ) + position.getX( j ),\n\t\t\t\t\t\tpositionAttribute.getY( j ) + position.getY( j ),\n\t\t\t\t\t\tpositionAttribute.getZ( j ) + position.getZ( j )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.attributes.position ) {\n\n\t\t\t\t// Copying the original position not to affect the final position.\n\t\t\t\t// See the formula above.\n\t\t\t\tpositionAttribute = geometry.attributes.position.clone();\n\n\t\t\t}\n\n\t\t\tif ( positionAttribute !== undefined ) {\n\n\t\t\t\tpositionAttribute.name = attributeName;\n\t\t\t\tmorphAttributes.position.push( positionAttribute );\n\n\t\t\t}\n\n\t\t\tif ( target.NORMAL !== undefined ) {\n\n\t\t\t\tmaterial.morphNormals = true;\n\n\t\t\t\t// see target.POSITION's comment\n\n\t\t\t\tnormalAttribute = accessors[ target.NORMAL ].clone();\n\t\t\t\tvar normal = geometry.attributes.normal;\n\n\t\t\t\tfor ( var j = 0, jl = normalAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\tnormalAttribute.setXYZ(\n\t\t\t\t\t\tj,\n\t\t\t\t\t\tnormalAttribute.getX( j ) + normal.getX( j ),\n\t\t\t\t\t\tnormalAttribute.getY( j ) + normal.getY( j ),\n\t\t\t\t\t\tnormalAttribute.getZ( j ) + normal.getZ( j )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.attributes.normal !== undefined ) {\n\n\t\t\t\tnormalAttribute = geometry.attributes.normal.clone();\n\n\t\t\t}\n\n\t\t\tif ( normalAttribute !== undefined ) {\n\n\t\t\t\tnormalAttribute.name = attributeName;\n\t\t\t\tmorphAttributes.normal.push( normalAttribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tmesh.updateMorphTargets();\n\n\t\tif ( meshDef.weights !== undefined ) {\n\n\t\t\tfor ( var i = 0, il = meshDef.weights.length; i < il; i ++ ) {\n\n\t\t\t\tmesh.morphTargetInfluences[ i ] = meshDef.weights[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction isPrimitiveEqual( a, b ) {\n\n\t\tif ( a.indices !== b.indices ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tvar attribA = a.attributes || {};\n\t\tvar attribB = b.attributes || {};\n\t\tvar keysA = Object.keys( attribA );\n\t\tvar keysB = Object.keys( attribB );\n\n\t\tif ( keysA.length !== keysB.length ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfor ( var i = 0, il = keysA.length; i < il; i ++ ) {\n\n\t\t\tvar key = keysA[ i ];\n\n\t\t\tif ( attribA[ key ] !== attribB[ key ] ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction getCachedGeometry( cache, newPrimitive ) {\n\n\t\tfor ( var i = 0, il = cache.length; i < il; i ++ ) {\n\n\t\t\tvar cached = cache[ i ];\n\n\t\t\tif ( isPrimitiveEqual( cached.primitive, newPrimitive ) ) {\n\n\t\t\t\treturn cached.geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t/* GLTF PARSER */\n\n\tfunction GLTFParser( json, extensions, options ) {\n\n\t\tthis.json = json || {};\n\t\tthis.extensions = extensions || {};\n\t\tthis.options = options || {};\n\n\t\t// loader object cache\n\t\tthis.cache = new GLTFRegistry();\n\n\t\t// BufferGeometry caching\n\t\tthis.primitiveCache = [];\n\n\t\tthis.textureLoader = new THREE.TextureLoader( this.options.manager );\n\t\tthis.textureLoader.setCrossOrigin( this.options.crossOrigin );\n\n\t\tthis.fileLoader = new THREE.FileLoader( this.options.manager );\n\t\tthis.fileLoader.setResponseType( 'arraybuffer' );\n\n\t}\n\n\tGLTFParser.prototype.parse = function ( onLoad, onError ) {\n\n\t\tvar json = this.json;\n\t\tvar parser = this;\n\n\t\t// Clear the loader cache\n\t\tthis.cache.removeAll();\n\n\t\t// Mark the special nodes/meshes in json for efficient parse\n\t\tthis.markDefs();\n\n\t\t// Fire the callback on complete\n\t\tthis.getMultiDependencies( [\n\n\t\t\t'scene',\n\t\t\t'animation',\n\t\t\t'camera'\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\tvar scenes = dependencies.scenes || [];\n\t\t\tvar scene = scenes[ json.scene || 0 ];\n\t\t\tvar animations = dependencies.animations || [];\n\t\t\tvar asset = json.asset;\n\t\t\tvar cameras = dependencies.cameras || [];\n\n\t\t\tonLoad( scene, scenes, cameras, animations, asset );\n\n\t\t} ).catch( onError );\n\n\t};\n\n\t/**\n\t * Marks the special nodes/meshes in json for efficient parse.\n\t */\n\tGLTFParser.prototype.markDefs = function () {\n\n\t\tvar nodeDefs = this.json.nodes || [];\n\t\tvar skinDefs = this.json.skins || [];\n\t\tvar meshDefs = this.json.meshes || [];\n\n\t\tvar meshReferences = {};\n\t\tvar meshUses = {};\n\n\t\t// Nothing in the node definition indicates whether it is a Bone or an\n\t\t// Object3D. Use the skins' joint references to mark bones.\n\t\tfor ( var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex ++ ) {\n\n\t\t\tvar joints = skinDefs[ skinIndex ].joints;\n\n\t\t\tfor ( var i = 0, il = joints.length; i < il; i ++ ) {\n\n\t\t\t\tnodeDefs[ joints[ i ] ].isBone = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Meshes can (and should) be reused by multiple nodes in a glTF asset. To\n\t\t// avoid having more than one THREE.Mesh with the same name, count\n\t\t// references and rename instances below.\n\t\t//\n\t\t// Example: CesiumMilkTruck sample model reuses \"Wheel\" meshes.\n\t\tfor ( var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {\n\n\t\t\tvar nodeDef = nodeDefs[ nodeIndex ];\n\n\t\t\tif ( nodeDef.mesh !== undefined ) {\n\n\t\t\t\tif ( meshReferences[ nodeDef.mesh ] === undefined ) {\n\n\t\t\t\t\tmeshReferences[ nodeDef.mesh ] = meshUses[ nodeDef.mesh ] = 0;\n\n\t\t\t\t}\n\n\t\t\t\tmeshReferences[ nodeDef.mesh ] ++;\n\n\t\t\t\t// Nothing in the mesh definition indicates whether it is\n\t\t\t\t// a SkinnedMesh or Mesh. Use the node's mesh reference\n\t\t\t\t// to mark SkinnedMesh if node has skin.\n\t\t\t\tif ( nodeDef.skin !== undefined ) {\n\n\t\t\t\t\tmeshDefs[ nodeDef.mesh ].isSkinnedMesh = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.json.meshReferences = meshReferences;\n\t\tthis.json.meshUses = meshUses;\n\n\t};\n\n\t/**\n\t * Requests the specified dependency asynchronously, with caching.\n\t * @param {string} type\n\t * @param {number} index\n\t * @return {Promise<Object>}\n\t */\n\tGLTFParser.prototype.getDependency = function ( type, index ) {\n\n\t\tvar cacheKey = type + ':' + index;\n\t\tvar dependency = this.cache.get( cacheKey );\n\n\t\tif ( ! dependency ) {\n\n\t\t\tvar fnName = 'load' + type.charAt( 0 ).toUpperCase() + type.slice( 1 );\n\t\t\tdependency = this[ fnName ]( index );\n\t\t\tthis.cache.add( cacheKey, dependency );\n\n\t\t}\n\n\t\treturn dependency;\n\n\t};\n\n\t/**\n\t * Requests all dependencies of the specified type asynchronously, with caching.\n\t * @param {string} type\n\t * @return {Promise<Array<Object>>}\n\t */\n\tGLTFParser.prototype.getDependencies = function ( type ) {\n\n\t\tvar dependencies = this.cache.get( type );\n\n\t\tif ( ! dependencies ) {\n\n\t\t\tvar parser = this;\n\t\t\tvar defs = this.json[ type + ( type === 'mesh' ? 'es' : 's' ) ] || [];\n\n\t\t\tdependencies = Promise.all( defs.map( function ( def, index ) {\n\n\t\t\t\treturn parser.getDependency( type, index );\n\n\t\t\t} ) );\n\n\t\t\tthis.cache.add( type, dependencies );\n\n\t\t}\n\n\t\treturn dependencies;\n\n\t};\n\n\t/**\n\t * Requests all multiple dependencies of the specified types asynchronously, with caching.\n\t * @param {Array<string>} types\n\t * @return {Promise<Object<Array<Object>>>}\n\t */\n\tGLTFParser.prototype.getMultiDependencies = function ( types ) {\n\n\t\tvar results = {};\n\t\tvar pendings = [];\n\n\t\tfor ( var i = 0, il = types.length; i < il; i ++ ) {\n\n\t\t\tvar type = types[ i ];\n\t\t\tvar value = this.getDependencies( type );\n\n\t\t\tvalue = value.then( function ( key, value ) {\n\n\t\t\t\tresults[ key ] = value;\n\n\t\t\t}.bind( this, type + ( type === 'mesh' ? 'es' : 's' ) ) );\n\n\t\t\tpendings.push( value );\n\n\t\t}\n\n\t\treturn Promise.all( pendings ).then( function () {\n\n\t\t\treturn results;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t * @param {number} bufferIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */\n\tGLTFParser.prototype.loadBuffer = function ( bufferIndex ) {\n\n\t\tvar bufferDef = this.json.buffers[ bufferIndex ];\n\t\tvar loader = this.fileLoader;\n\n\t\tif ( bufferDef.type && bufferDef.type !== 'arraybuffer' ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.' );\n\n\t\t}\n\n\t\t// If present, GLB container is required to be the first buffer.\n\t\tif ( bufferDef.uri === undefined && bufferIndex === 0 ) {\n\n\t\t\treturn Promise.resolve( this.extensions[ EXTENSIONS.KHR_BINARY_GLTF ].body );\n\n\t\t}\n\n\t\tvar options = this.options;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tloader.load( resolveURL( bufferDef.uri, options.path ), resolve, undefined, function () {\n\n\t\t\t\treject( new Error( 'THREE.GLTFLoader: Failed to load buffer \"' + bufferDef.uri + '\".' ) );\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t * @param {number} bufferViewIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */\n\tGLTFParser.prototype.loadBufferView = function ( bufferViewIndex ) {\n\n\t\tvar bufferViewDef = this.json.bufferViews[ bufferViewIndex ];\n\n\t\treturn this.getDependency( 'buffer', bufferViewDef.buffer ).then( function ( buffer ) {\n\n\t\t\tvar byteLength = bufferViewDef.byteLength || 0;\n\t\t\tvar byteOffset = bufferViewDef.byteOffset || 0;\n\t\t\treturn buffer.slice( byteOffset, byteOffset + byteLength );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors\n\t * @param {number} accessorIndex\n\t * @return {Promise<THREE.BufferAttribute|THREE.InterleavedBufferAttribute>}\n\t */\n\tGLTFParser.prototype.loadAccessor = function ( accessorIndex ) {\n\n\t\tvar json = this.json;\n\n\t\tvar accessorDef = this.json.accessors[ accessorIndex ];\n\n\t\tvar pendingBufferViews = [];\n\n\t\tif ( accessorDef.bufferView !== undefined ) {\n\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.bufferView ) );\n\n\t\t} else {\n\n\t\t\tpendingBufferViews.push( null );\n\n\t\t}\n\n\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.indices.bufferView ) );\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.values.bufferView ) );\n\n\t\t}\n\n\t\treturn Promise.all( pendingBufferViews ).then( function ( bufferViews ) {\n\n\t\t\tvar bufferView = bufferViews[ 0 ];\n\n\t\t\tvar itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];\n\t\t\tvar TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\n\t\t\t// For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.\n\t\t\tvar elementBytes = TypedArray.BYTES_PER_ELEMENT;\n\t\t\tvar itemBytes = elementBytes * itemSize;\n\t\t\tvar byteStride = json.bufferViews[ accessorDef.bufferView ].byteStride;\n\t\t\tvar normalized = accessorDef.normalized === true;\n\t\t\tvar array, bufferAttribute;\n\n\t\t\t// The buffer is not interleaved if the stride is the item size in bytes.\n\t\t\tif ( byteStride && byteStride !== itemBytes ) {\n\n\t\t\t\t// Use the full buffer if it's interleaved.\n\t\t\t\tarray = new TypedArray( bufferView );\n\n\t\t\t\t// Integer parameters to IB/IBA are in array elements, not bytes.\n\t\t\t\tvar ib = new THREE.InterleavedBuffer( array, byteStride / elementBytes );\n\n\t\t\t\tbufferAttribute = new THREE.InterleavedBufferAttribute( ib, itemSize, accessorDef.byteOffset / elementBytes, normalized );\n\n\t\t\t} else {\n\n\t\t\t\tif ( bufferView === null ) {\n\n\t\t\t\t\tarray = new TypedArray( accessorDef.count * itemSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tarray = new TypedArray( bufferView, accessorDef.byteOffset, accessorDef.count * itemSize );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute = new THREE.BufferAttribute( array, itemSize, normalized );\n\n\t\t\t}\n\n\t\t\t// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors\n\t\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\t\tvar itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;\n\t\t\t\tvar TypedArrayIndices = WEBGL_COMPONENT_TYPES[ accessorDef.sparse.indices.componentType ];\n\n\t\t\t\tvar byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;\n\t\t\t\tvar byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;\n\n\t\t\t\tvar sparseIndices = new TypedArrayIndices( bufferViews[ 1 ], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices );\n\t\t\t\tvar sparseValues = new TypedArray( bufferViews[ 2 ], byteOffsetValues, accessorDef.sparse.count * itemSize );\n\n\t\t\t\tif ( bufferView !== null ) {\n\n\t\t\t\t\t// Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.\n\t\t\t\t\tbufferAttribute.setArray( bufferAttribute.array.slice() );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0, il = sparseIndices.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar index = sparseIndices[ i ];\n\n\t\t\t\t\tbufferAttribute.setX( index, sparseValues[ i * itemSize ] );\n\t\t\t\t\tif ( itemSize >= 2 ) bufferAttribute.setY( index, sparseValues[ i * itemSize + 1 ] );\n\t\t\t\t\tif ( itemSize >= 3 ) bufferAttribute.setZ( index, sparseValues[ i * itemSize + 2 ] );\n\t\t\t\t\tif ( itemSize >= 4 ) bufferAttribute.setW( index, sparseValues[ i * itemSize + 3 ] );\n\t\t\t\t\tif ( itemSize >= 5 ) throw new Error( 'THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn bufferAttribute;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures\n\t * @param {number} textureIndex\n\t * @return {Promise<THREE.Texture>}\n\t */\n\tGLTFParser.prototype.loadTexture = function ( textureIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\t\tvar options = this.options;\n\t\tvar textureLoader = this.textureLoader;\n\n\t\tvar URL = window.URL || window.webkitURL;\n\n\t\tvar textureDef = json.textures[ textureIndex ];\n\t\tvar source = json.images[ textureDef.source ];\n\t\tvar sourceURI = source.uri;\n\t\tvar isObjectURL = false;\n\n\t\tif ( source.bufferView !== undefined ) {\n\n\t\t\t// Load binary image data from bufferView, if provided.\n\n\t\t\tsourceURI = parser.getDependency( 'bufferView', source.bufferView ).then( function ( bufferView ) {\n\n\t\t\t\tisObjectURL = true;\n\t\t\t\tvar blob = new Blob( [ bufferView ], { type: source.mimeType } );\n\t\t\t\tsourceURI = URL.createObjectURL( blob );\n\t\t\t\treturn sourceURI;\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn Promise.resolve( sourceURI ).then( function ( sourceURI ) {\n\n\t\t\t// Load Texture resource.\n\n\t\t\tvar loader = THREE.Loader.Handlers.get( sourceURI ) || textureLoader;\n\n\t\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\t\tloader.load( resolveURL( sourceURI, options.path ), resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t} ).then( function ( texture ) {\n\n\t\t\t// Clean up resources and configure Texture.\n\n\t\t\tif ( isObjectURL === true ) {\n\n\t\t\t\tURL.revokeObjectURL( sourceURI );\n\n\t\t\t}\n\n\t\t\ttexture.flipY = false;\n\n\t\t\tif ( textureDef.name !== undefined ) texture.name = textureDef.name;\n\n\t\t\ttexture.format = textureDef.format !== undefined ? WEBGL_TEXTURE_FORMATS[ textureDef.format ] : THREE.RGBAFormat;\n\n\t\t\tif ( textureDef.internalFormat !== undefined && texture.format !== WEBGL_TEXTURE_FORMATS[ textureDef.internalFormat ] ) {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Three.js does not support texture internalFormat which is different from texture format. ' +\n\t\t\t\t\t\t\t\t\t\t\t'internalFormat will be forced to be the same value as format.' );\n\n\t\t\t}\n\n\t\t\ttexture.type = textureDef.type !== undefined ? WEBGL_TEXTURE_DATATYPES[ textureDef.type ] : THREE.UnsignedByteType;\n\n\t\t\tvar samplers = json.samplers || {};\n\t\t\tvar sampler = samplers[ textureDef.sampler ] || {};\n\n\t\t\ttexture.magFilter = WEBGL_FILTERS[ sampler.magFilter ] || THREE.LinearFilter;\n\t\t\ttexture.minFilter = WEBGL_FILTERS[ sampler.minFilter ] || THREE.LinearMipMapLinearFilter;\n\t\t\ttexture.wrapS = WEBGL_WRAPPINGS[ sampler.wrapS ] || THREE.RepeatWrapping;\n\t\t\ttexture.wrapT = WEBGL_WRAPPINGS[ sampler.wrapT ] || THREE.RepeatWrapping;\n\n\t\t\treturn texture;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Asynchronously assigns a texture to the given material parameters.\n\t * @param {Object} materialParams\n\t * @param {string} textureName\n\t * @param {number} textureIndex\n\t * @return {Promise}\n\t */\n\tGLTFParser.prototype.assignTexture = function ( materialParams, textureName, textureIndex ) {\n\n\t\treturn this.getDependency( 'texture', textureIndex ).then( function ( texture ) {\n\n\t\t\tmaterialParams[ textureName ] = texture;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials\n\t * @param {number} materialIndex\n\t * @return {Promise<THREE.Material>}\n\t */\n\tGLTFParser.prototype.loadMaterial = function ( materialIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\t\tvar materialDef = this.json.materials[ materialIndex ];\n\n\t\tvar materialType;\n\t\tvar materialParams = {};\n\t\tvar materialExtensions = materialDef.extensions || {};\n\n\t\tvar pending = [];\n\n\t\tif ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_COMMON ] ) {\n\n\t\t\tvar khcExtension = extensions[ EXTENSIONS.KHR_MATERIALS_COMMON ];\n\t\t\tmaterialType = khcExtension.getMaterialType( materialDef );\n\t\t\tpending.push( khcExtension.extendParams( materialParams, materialDef, parser ) );\n\n\t\t} else if ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ] ) {\n\n\t\t\tvar sgExtension = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ];\n\t\t\tmaterialType = sgExtension.getMaterialType( materialDef );\n\t\t\tpending.push( sgExtension.extendParams( materialParams, materialDef, parser ) );\n\n\t\t} else if ( materialDef.pbrMetallicRoughness !== undefined ) {\n\n\t\t\t// Specification:\n\t\t\t// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material\n\n\t\t\tmaterialType = THREE.MeshStandardMaterial;\n\n\t\t\tvar metallicRoughness = materialDef.pbrMetallicRoughness;\n\n\t\t\tmaterialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );\n\t\t\tmaterialParams.opacity = 1.0;\n\n\t\t\tif ( Array.isArray( metallicRoughness.baseColorFactor ) ) {\n\n\t\t\t\tvar array = metallicRoughness.baseColorFactor;\n\n\t\t\t\tmaterialParams.color.fromArray( array );\n\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( metallicRoughness.baseColorTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture.index ) );\n\n\t\t\t}\n\n\t\t\tmaterialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;\n\t\t\tmaterialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;\n\n\t\t\tif ( metallicRoughness.metallicRoughnessTexture !== undefined ) {\n\n\t\t\t\tvar textureIndex = metallicRoughness.metallicRoughnessTexture.index;\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'metalnessMap', textureIndex ) );\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'roughnessMap', textureIndex ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tmaterialType = THREE.MeshPhongMaterial;\n\n\t\t}\n\n\t\tif ( materialDef.doubleSided === true ) {\n\n\t\t\tmaterialParams.side = THREE.DoubleSide;\n\n\t\t}\n\n\t\tvar alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;\n\n\t\tif ( alphaMode === ALPHA_MODES.BLEND ) {\n\n\t\t\tmaterialParams.transparent = true;\n\n\t\t} else {\n\n\t\t\tmaterialParams.transparent = false;\n\n\t\t\tif ( alphaMode === ALPHA_MODES.MASK ) {\n\n\t\t\t\tmaterialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.normalTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'normalMap', materialDef.normalTexture.index ) );\n\n\t\t\tmaterialParams.normalScale = new THREE.Vector2( 1, 1 );\n\n\t\t\tif ( materialDef.normalTexture.scale !== undefined ) {\n\n\t\t\t\tmaterialParams.normalScale.set( materialDef.normalTexture.scale, materialDef.normalTexture.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.occlusionTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'aoMap', materialDef.occlusionTexture.index ) );\n\n\t\t\tif ( materialDef.occlusionTexture.strength !== undefined ) {\n\n\t\t\t\tmaterialParams.aoMapIntensity = materialDef.occlusionTexture.strength;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.emissiveFactor !== undefined ) {\n\n\t\t\tif ( materialType === THREE.MeshBasicMaterial ) {\n\n\t\t\t\tmaterialParams.color = new THREE.Color().fromArray( materialDef.emissiveFactor );\n\n\t\t\t} else {\n\n\t\t\t\tmaterialParams.emissive = new THREE.Color().fromArray( materialDef.emissiveFactor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.emissiveTexture !== undefined ) {\n\n\t\t\tif ( materialType === THREE.MeshBasicMaterial ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', materialDef.emissiveTexture.index ) );\n\n\t\t\t} else {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'emissiveMap', materialDef.emissiveTexture.index ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\tvar material;\n\n\t\t\tif ( materialType === THREE.ShaderMaterial ) {\n\n\t\t\t\tmaterial = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].createMaterial( materialParams );\n\n\t\t\t} else {\n\n\t\t\t\tmaterial = new materialType( materialParams );\n\n\t\t\t}\n\n\t\t\tif ( materialDef.name !== undefined ) material.name = materialDef.name;\n\n\t\t\t// Normal map textures use OpenGL conventions:\n\t\t\t// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#materialnormaltexture\n\t\t\tif ( material.normalScale ) {\n\n\t\t\t\tmaterial.normalScale.x = - material.normalScale.x;\n\n\t\t\t}\n\n\t\t\t// emissiveTexture and baseColorTexture use sRGB encoding.\n\t\t\tif ( material.map ) material.map.encoding = THREE.sRGBEncoding;\n\t\t\tif ( material.emissiveMap ) material.emissiveMap.encoding = THREE.sRGBEncoding;\n\n\t\t\tif ( materialDef.extras ) material.userData = materialDef.extras;\n\n\t\t\treturn material;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry\n\t * @param {Array<Object>} primitives\n\t * @return {Promise<Array<THREE.BufferGeometry>>}\n\t */\n\tGLTFParser.prototype.loadGeometries = function ( primitives ) {\n\n\t\tvar cache = this.primitiveCache;\n\n\t\treturn this.getDependencies( 'accessor' ).then( function ( accessors ) {\n\n\t\t\tvar geometries = [];\n\n\t\t\tfor ( var i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\t\tvar primitive = primitives[ i ];\n\n\t\t\t\t// See if we've already created this geometry\n\t\t\t\tvar cached = getCachedGeometry( cache, primitive );\n\n\t\t\t\tif ( cached ) {\n\n\t\t\t\t\t// Use the cached geometry if it exists\n\t\t\t\t\tgeometries.push( cached );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Otherwise create a new geometry\n\t\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\t\t\tvar attributes = primitive.attributes;\n\n\t\t\t\t\tfor ( var attributeId in attributes ) {\n\n\t\t\t\t\t\tvar attributeEntry = attributes[ attributeId ];\n\n\t\t\t\t\t\tvar bufferAttribute = accessors[ attributeEntry ];\n\n\t\t\t\t\t\tswitch ( attributeId ) {\n\n\t\t\t\t\t\t\tcase 'POSITION':\n\n\t\t\t\t\t\t\t\tgeometry.addAttribute( 'position', bufferAttribute );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'NORMAL':\n\n\t\t\t\t\t\t\t\tgeometry.addAttribute( 'normal', bufferAttribute );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'TEXCOORD_0':\n\t\t\t\t\t\t\tcase 'TEXCOORD0':\n\t\t\t\t\t\t\tcase 'TEXCOORD':\n\n\t\t\t\t\t\t\t\tgeometry.addAttribute( 'uv', bufferAttribute );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'TEXCOORD_1':\n\n\t\t\t\t\t\t\t\tgeometry.addAttribute( 'uv2', bufferAttribute );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'COLOR_0':\n\t\t\t\t\t\t\tcase 'COLOR0':\n\t\t\t\t\t\t\tcase 'COLOR':\n\n\t\t\t\t\t\t\t\tgeometry.addAttribute( 'color', bufferAttribute );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'WEIGHTS_0':\n\t\t\t\t\t\t\tcase 'WEIGHT': // WEIGHT semantic deprecated.\n\n\t\t\t\t\t\t\t\tgeometry.addAttribute( 'skinWeight', bufferAttribute );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'JOINTS_0':\n\t\t\t\t\t\t\tcase 'JOINT': // JOINT semantic deprecated.\n\n\t\t\t\t\t\t\t\tgeometry.addAttribute( 'skinIndex', bufferAttribute );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( primitive.indices !== undefined ) {\n\n\t\t\t\t\t\tgeometry.setIndex( accessors[ primitive.indices ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Cache this geometry\n\t\t\t\t\tcache.push( {\n\n\t\t\t\t\t\tprimitive: primitive,\n\t\t\t\t\t\tgeometry: geometry\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tgeometries.push( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes\n\t * @param {number} meshIndex\n\t * @return {Promise<THREE.Group|THREE.Mesh|THREE.SkinnedMesh>}\n\t */\n\tGLTFParser.prototype.loadMesh = function ( meshIndex ) {\n\n\t\tvar scope = this;\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\n\t\tvar meshDef = this.json.meshes[ meshIndex ];\n\n\t\treturn this.getMultiDependencies( [\n\n\t\t\t'accessor',\n\t\t\t'material'\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\tvar group = new THREE.Group();\n\n\t\t\tvar primitives = meshDef.primitives;\n\n\t\t\treturn scope.loadGeometries( primitives ).then( function ( geometries ) {\n\n\t\t\t\tfor ( var i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar primitive = primitives[ i ];\n\t\t\t\t\tvar geometry = geometries[ i ];\n\n\t\t\t\t\tvar material = primitive.material === undefined\n\t\t\t\t\t\t? createDefaultMaterial()\n\t\t\t\t\t\t: dependencies.materials[ primitive.material ];\n\n\t\t\t\t\tif ( material.aoMap\n\t\t\t\t\t\t\t&& geometry.attributes.uv2 === undefined\n\t\t\t\t\t\t\t&& geometry.attributes.uv !== undefined ) {\n\n\t\t\t\t\t\tconsole.log( 'THREE.GLTFLoader: Duplicating UVs to support aoMap.' );\n\t\t\t\t\t\tgeometry.addAttribute( 'uv2', new THREE.BufferAttribute( geometry.attributes.uv.array, 2 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// If the material will be modified later on, clone it now.\n\t\t\t\t\tvar useVertexColors = geometry.attributes.color !== undefined;\n\t\t\t\t\tvar useFlatShading = geometry.attributes.normal === undefined;\n\t\t\t\t\tvar useSkinning = meshDef.isSkinnedMesh === true;\n\t\t\t\t\tvar useMorphTargets = primitive.targets !== undefined;\n\n\t\t\t\t\tif ( useVertexColors || useFlatShading || useSkinning || useMorphTargets ) {\n\n\t\t\t\t\t\tif ( material.isGLTFSpecularGlossinessMaterial ) {\n\n\t\t\t\t\t\t\tvar specGlossExtension = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ];\n\t\t\t\t\t\t\tmaterial = specGlossExtension.cloneMaterial( material );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmaterial = material.clone();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( useVertexColors ) {\n\n\t\t\t\t\t\tmaterial.vertexColors = THREE.VertexColors;\n\t\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( useFlatShading ) {\n\n\t\t\t\t\t\tmaterial.flatShading = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar mesh;\n\n\t\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLES ||\n\t\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ||\n\t\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ||\n\t\t\t\t\t\tprimitive.mode === undefined ) {\n\n\t\t\t\t\t\tif ( useSkinning ) {\n\n\t\t\t\t\t\t\tmesh = new THREE.SkinnedMesh( geometry, material );\n\t\t\t\t\t\t\tmaterial.skinning = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmesh = new THREE.Mesh( geometry, material );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ) {\n\n\t\t\t\t\t\t\tmesh.drawMode = THREE.TriangleStripDrawMode;\n\n\t\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ) {\n\n\t\t\t\t\t\t\tmesh.drawMode = THREE.TriangleFanDrawMode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINES ) {\n\n\t\t\t\t\t\tmesh = new THREE.LineSegments( geometry, material );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_STRIP ) {\n\n\t\t\t\t\t\tmesh = new THREE.Line( geometry, material );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_LOOP ) {\n\n\t\t\t\t\t\tmesh = new THREE.LineLoop( geometry, material );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.POINTS ) {\n\n\t\t\t\t\t\tmesh = new THREE.Points( geometry, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmesh.name = meshDef.name || ( 'mesh_' + meshIndex );\n\n\t\t\t\t\tif ( useMorphTargets ) {\n\n\t\t\t\t\t\taddMorphTargets( mesh, meshDef, primitive, dependencies.accessors );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( meshDef.extras !== undefined ) mesh.userData = meshDef.extras;\n\t\t\t\t\tif ( primitive.extras !== undefined ) mesh.geometry.userData = primitive.extras;\n\n\t\t\t\t\t// for Specular-Glossiness.\n\t\t\t\t\tif ( material.isGLTFSpecularGlossinessMaterial === true ) {\n\n\t\t\t\t\t\tmesh.onBeforeRender = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].refreshUniforms;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( primitives.length > 1 ) {\n\n\t\t\t\t\t\tmesh.name += '_' + i;\n\n\t\t\t\t\t\tgroup.add( mesh );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn mesh;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn group;\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras\n\t * @param {number} cameraIndex\n\t * @return {Promise<THREE.Camera>}\n\t */\n\tGLTFParser.prototype.loadCamera = function ( cameraIndex ) {\n\n\t\tvar camera;\n\t\tvar cameraDef = this.json.cameras[ cameraIndex ];\n\t\tvar params = cameraDef[ cameraDef.type ];\n\n\t\tif ( ! params ) {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing camera parameters.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( cameraDef.type === 'perspective' ) {\n\n\t\t\tvar aspectRatio = params.aspectRatio || 1;\n\t\t\tvar xfov = params.yfov * aspectRatio;\n\n\t\t\tcamera = new THREE.PerspectiveCamera( THREE.Math.radToDeg( xfov ), aspectRatio, params.znear || 1, params.zfar || 2e6 );\n\n\t\t} else if ( cameraDef.type === 'orthographic' ) {\n\n\t\t\tcamera = new THREE.OrthographicCamera( params.xmag / - 2, params.xmag / 2, params.ymag / 2, params.ymag / - 2, params.znear, params.zfar );\n\n\t\t}\n\n\t\tif ( cameraDef.name !== undefined ) camera.name = cameraDef.name;\n\t\tif ( cameraDef.extras ) camera.userData = cameraDef.extras;\n\n\t\treturn Promise.resolve( camera );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins\n\t * @param {number} skinIndex\n\t * @return {Promise<Object>}\n\t */\n\tGLTFParser.prototype.loadSkin = function ( skinIndex ) {\n\n\t\tvar skinDef = this.json.skins[ skinIndex ];\n\n\t\tvar skinEntry = { joints: skinDef.joints };\n\n\t\tif ( skinDef.inverseBindMatrices === undefined ) {\n\n\t\t\treturn Promise.resolve( skinEntry );\n\n\t\t}\n\n\t\treturn this.getDependency( 'accessor', skinDef.inverseBindMatrices ).then( function ( accessor ) {\n\n\t\t\tskinEntry.inverseBindMatrices = accessor;\n\n\t\t\treturn skinEntry;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations\n\t * @param {number} animationIndex\n\t * @return {Promise<THREE.AnimationClip>}\n\t */\n\tGLTFParser.prototype.loadAnimation = function ( animationIndex ) {\n\n\t\tvar json = this.json;\n\n\t\tvar animationDef = this.json.animations[ animationIndex ];\n\n\t\treturn this.getMultiDependencies( [\n\n\t\t\t'accessor',\n\t\t\t'node'\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0, il = animationDef.channels.length; i < il; i ++ ) {\n\n\t\t\t\tvar channel = animationDef.channels[ i ];\n\t\t\t\tvar sampler = animationDef.samplers[ channel.sampler ];\n\n\t\t\t\tif ( sampler ) {\n\n\t\t\t\t\tvar target = channel.target;\n\t\t\t\t\tvar name = target.node !== undefined ? target.node : target.id; // NOTE: target.id is deprecated.\n\t\t\t\t\tvar input = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.input ] : sampler.input;\n\t\t\t\t\tvar output = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.output ] : sampler.output;\n\n\t\t\t\t\tvar inputAccessor = dependencies.accessors[ input ];\n\t\t\t\t\tvar outputAccessor = dependencies.accessors[ output ];\n\n\t\t\t\t\tvar node = dependencies.nodes[ name ];\n\n\t\t\t\t\tif ( node ) {\n\n\t\t\t\t\t\tnode.updateMatrix();\n\t\t\t\t\t\tnode.matrixAutoUpdate = true;\n\n\t\t\t\t\t\tvar TypedKeyframeTrack;\n\n\t\t\t\t\t\tswitch ( PATH_PROPERTIES[ target.path ] ) {\n\n\t\t\t\t\t\t\tcase PATH_PROPERTIES.weights:\n\n\t\t\t\t\t\t\t\tTypedKeyframeTrack = THREE.NumberKeyframeTrack;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase PATH_PROPERTIES.rotation:\n\n\t\t\t\t\t\t\t\tTypedKeyframeTrack = THREE.QuaternionKeyframeTrack;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase PATH_PROPERTIES.position:\n\t\t\t\t\t\t\tcase PATH_PROPERTIES.scale:\n\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\tTypedKeyframeTrack = THREE.VectorKeyframeTrack;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar targetName = node.name ? node.name : node.uuid;\n\n\t\t\t\t\t\tif ( sampler.interpolation === 'CUBICSPLINE' ) {\n\n\t\t\t\t\t\t\tvar itemSize = outputAccessor.itemSize;\n\t\t\t\t\t\t\tvar TypedArray = outputAccessor.array.constructor;\n\t\t\t\t\t\t\tvar outputAccessorValues = new TypedArray( outputAccessor.count * itemSize / 3 );\n\n\t\t\t\t\t\t\t// Layout of keyframe output values for CUBICSPLINE animations:\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t//   [ inTangent1, splineVertex1, outTangent1, inTangent2, splineVertex2, ... ]\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// THREE.KeyframeTrack infers tangents from the spline vertices when interpolating:\n\t\t\t\t\t\t\t// those values are extracted below. This still guarantees smooth curves, but does\n\t\t\t\t\t\t\t// throw away more precise information in the tangents. In the future, consider\n\t\t\t\t\t\t\t// re-sampling at a higher framerate using the tangents provided.\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// See: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = outputAccessor.count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\toutputAccessorValues[ j * itemSize / 3 ] = outputAccessor.getX( j + 1 );\n\t\t\t\t\t\t\t\tif ( itemSize > 1 ) outputAccessorValues[ j * itemSize / 3 + 1 ] = outputAccessor.getY( j + 1 );\n\t\t\t\t\t\t\t\tif ( itemSize > 2 ) outputAccessorValues[ j * itemSize / 3 + 2 ] = outputAccessor.getZ( j + 1 );\n\t\t\t\t\t\t\t\tif ( itemSize > 3 ) outputAccessorValues[ j * itemSize / 3 + 3 ] = outputAccessor.getW( j + 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\toutputAccessor = new THREE.BufferAttribute( outputAccessorValues, itemSize / 3, outputAccessor.normalized );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar interpolation = sampler.interpolation !== undefined ? INTERPOLATION[ sampler.interpolation ] : THREE.InterpolateLinear;\n\n\t\t\t\t\t\tvar targetNames = [];\n\n\t\t\t\t\t\tif ( PATH_PROPERTIES[ target.path ] === PATH_PROPERTIES.weights ) {\n\n\t\t\t\t\t\t\t// node should be THREE.Group here but\n\t\t\t\t\t\t\t// PATH_PROPERTIES.weights(morphTargetInfluences) should be\n\t\t\t\t\t\t\t// the property of a mesh object under node.\n\t\t\t\t\t\t\t// So finding targets here.\n\n\t\t\t\t\t\t\tnode.traverse( function ( object ) {\n\n\t\t\t\t\t\t\t\tif ( object.isMesh === true && object.material.morphTargets === true ) {\n\n\t\t\t\t\t\t\t\t\ttargetNames.push( object.name ? object.name : object.uuid );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ttargetNames.push( targetName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// KeyframeTrack.optimize() will modify given 'times' and 'values'\n\t\t\t\t\t\t// buffers before creating a truncated copy to keep. Because buffers may\n\t\t\t\t\t\t// be reused by other tracks, make copies here.\n\t\t\t\t\t\tfor ( var j = 0, jl = targetNames.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\ttracks.push( new TypedKeyframeTrack(\n\t\t\t\t\t\t\t\ttargetNames[ j ] + '.' + PATH_PROPERTIES[ target.path ],\n\t\t\t\t\t\t\t\tTHREE.AnimationUtils.arraySlice( inputAccessor.array, 0 ),\n\t\t\t\t\t\t\t\tTHREE.AnimationUtils.arraySlice( outputAccessor.array, 0 ),\n\t\t\t\t\t\t\t\tinterpolation\n\t\t\t\t\t\t\t) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar name = animationDef.name !== undefined ? animationDef.name : 'animation_' + animationIndex;\n\n\t\t\treturn new THREE.AnimationClip( name, undefined, tracks );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy\n\t * @param {number} nodeIndex\n\t * @return {Promise<THREE.Object3D>}\n\t */\n\tGLTFParser.prototype.loadNode = function ( nodeIndex ) {\n\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\n\t\tvar meshReferences = this.json.meshReferences;\n\t\tvar meshUses = this.json.meshUses;\n\n\t\tvar nodeDef = this.json.nodes[ nodeIndex ];\n\n\t\treturn this.getMultiDependencies( [\n\n\t\t\t'mesh',\n\t\t\t'skin',\n\t\t\t'camera'\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\tvar node;\n\n\t\t\tif ( nodeDef.isBone === true ) {\n\n\t\t\t\tnode = new THREE.Bone();\n\n\t\t\t} else if ( nodeDef.mesh !== undefined ) {\n\n\t\t\t\tvar mesh = dependencies.meshes[ nodeDef.mesh ];\n\n\t\t\t\tnode = mesh.clone();\n\n\t\t\t\t// for Specular-Glossiness\n\t\t\t\tif ( mesh.isGroup === true ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mesh.children.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar child = mesh.children[ i ];\n\n\t\t\t\t\t\tif ( child.material && child.material.isGLTFSpecularGlossinessMaterial === true ) {\n\n\t\t\t\t\t\t\tnode.children[ i ].onBeforeRender = child.onBeforeRender;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( mesh.material && mesh.material.isGLTFSpecularGlossinessMaterial === true ) {\n\n\t\t\t\t\t\tnode.onBeforeRender = mesh.onBeforeRender;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( meshReferences[ nodeDef.mesh ] > 1 ) {\n\n\t\t\t\t\tnode.name += '_instance_' + meshUses[ nodeDef.mesh ] ++;\n\n\t\t\t\t}\n\n\t\t\t} else if ( nodeDef.camera !== undefined ) {\n\n\t\t\t\tnode = dependencies.cameras[ nodeDef.camera ];\n\n\t\t\t} else if ( nodeDef.extensions\n\t\t\t\t\t && nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS ]\n\t\t\t\t\t && nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS ].light !== undefined ) {\n\n\t\t\t\tvar lights = extensions[ EXTENSIONS.KHR_LIGHTS ].lights;\n\t\t\t\tnode = lights[ nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS ].light ];\n\n\t\t\t} else {\n\n\t\t\t\tnode = new THREE.Object3D();\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.name !== undefined ) {\n\n\t\t\t\tnode.name = THREE.PropertyBinding.sanitizeNodeName( nodeDef.name );\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.extras ) node.userData = nodeDef.extras;\n\n\t\t\tif ( nodeDef.matrix !== undefined ) {\n\n\t\t\t\tvar matrix = new THREE.Matrix4();\n\t\t\t\tmatrix.fromArray( nodeDef.matrix );\n\t\t\t\tnode.applyMatrix( matrix );\n\n\t\t\t} else {\n\n\t\t\t\tif ( nodeDef.translation !== undefined ) {\n\n\t\t\t\t\tnode.position.fromArray( nodeDef.translation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.rotation !== undefined ) {\n\n\t\t\t\t\tnode.quaternion.fromArray( nodeDef.rotation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.scale !== undefined ) {\n\n\t\t\t\t\tnode.scale.fromArray( nodeDef.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn node;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes\n\t * @param {number} sceneIndex\n\t * @return {Promise<THREE.Scene>}\n\t */\n\tGLTFParser.prototype.loadScene = function () {\n\n\t\t// scene node hierachy builder\n\n\t\tfunction buildNodeHierachy( nodeId, parentObject, json, allNodes, skins ) {\n\n\t\t\tvar node = allNodes[ nodeId ];\n\t\t\tvar nodeDef = json.nodes[ nodeId ];\n\n\t\t\t// build skeleton here as well\n\n\t\t\tif ( nodeDef.skin !== undefined ) {\n\n\t\t\t\tvar meshes = node.isGroup === true ? node.children : [ node ];\n\n\t\t\t\tfor ( var i = 0, il = meshes.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar mesh = meshes[ i ];\n\t\t\t\t\tvar skinEntry = skins[ nodeDef.skin ];\n\n\t\t\t\t\tvar bones = [];\n\t\t\t\t\tvar boneInverses = [];\n\n\t\t\t\t\tfor ( var j = 0, jl = skinEntry.joints.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar jointId = skinEntry.joints[ j ];\n\t\t\t\t\t\tvar jointNode = allNodes[ jointId ];\n\n\t\t\t\t\t\tif ( jointNode ) {\n\n\t\t\t\t\t\t\tbones.push( jointNode );\n\n\t\t\t\t\t\t\tvar mat = new THREE.Matrix4();\n\n\t\t\t\t\t\t\tif ( skinEntry.inverseBindMatrices !== undefined ) {\n\n\t\t\t\t\t\t\t\tmat.fromArray( skinEntry.inverseBindMatrices.array, j * 16 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tboneInverses.push( mat );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Joint \"%s\" could not be found.', jointId );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmesh.bind( new THREE.Skeleton( bones, boneInverses ), mesh.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build node hierachy\n\n\t\t\tparentObject.add( node );\n\n\t\t\tif ( nodeDef.children ) {\n\n\t\t\t\tvar children = nodeDef.children;\n\n\t\t\t\tfor ( var i = 0, il = children.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar child = children[ i ];\n\t\t\t\t\tbuildNodeHierachy( child, node, json, allNodes, skins );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn function loadScene( sceneIndex ) {\n\n\t\t\tvar json = this.json;\n\t\t\tvar extensions = this.extensions;\n\t\t\tvar sceneDef = this.json.scenes[ sceneIndex ];\n\n\t\t\treturn this.getMultiDependencies( [\n\n\t\t\t\t'node',\n\t\t\t\t'skin'\n\n\t\t\t] ).then( function ( dependencies ) {\n\n\t\t\t\tvar scene = new THREE.Scene();\n\t\t\t\tif ( sceneDef.name !== undefined ) scene.name = sceneDef.name;\n\n\t\t\t\tif ( sceneDef.extras ) scene.userData = sceneDef.extras;\n\n\t\t\t\tvar nodeIds = sceneDef.nodes || [];\n\n\t\t\t\tfor ( var i = 0, il = nodeIds.length; i < il; i ++ ) {\n\n\t\t\t\t\tbuildNodeHierachy( nodeIds[ i ], scene, json, dependencies.nodes, dependencies.skins );\n\n\t\t\t\t}\n\n\t\t\t\t// Ambient lighting, if present, is always attached to the scene root.\n\t\t\t\tif ( sceneDef.extensions\n\t\t\t\t\t\t && sceneDef.extensions[ EXTENSIONS.KHR_LIGHTS ]\n\t\t\t\t\t\t && sceneDef.extensions[ EXTENSIONS.KHR_LIGHTS ].light !== undefined ) {\n\n\t\t\t\t\tvar lights = extensions[ EXTENSIONS.KHR_LIGHTS ].lights;\n\t\t\t\t\tscene.add( lights[ sceneDef.extensions[ EXTENSIONS.KHR_LIGHTS ].light ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn scene;\n\n\t\t\t} );\n\n\t\t};\n\n\t}();\n\n\treturn GLTFLoader;\n\n} )();\n\nexport default GLTFLoader\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./static/js/GLTFLoader.js\n// module id = xkEE\n// module chunks = 1"],"sourceRoot":""}